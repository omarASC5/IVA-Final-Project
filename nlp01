{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"_cell_guid":"fc10cd96-8042-4b49-838b-072945f1c9ba","_uuid":"85f04750-ace9-473e-9a71-3895a0ab46b7","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:57:37.434390Z","iopub.status.busy":"2022-11-29T00:57:37.434032Z","iopub.status.idle":"2022-11-29T00:57:37.475969Z","shell.execute_reply":"2022-11-29T00:57:37.474957Z","shell.execute_reply.started":"2022-11-29T00:57:37.434301Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import pickle\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"code","execution_count":13,"metadata":{"_cell_guid":"c3c1a98b-c990-4014-a150-2399eb0d6609","_uuid":"1d8ee466-6e85-4f7c-ba7a-55a0c1bd7f7f","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:57:37.478874Z","iopub.status.busy":"2022-11-29T00:57:37.478300Z","iopub.status.idle":"2022-11-29T00:57:43.527194Z","shell.execute_reply":"2022-11-29T00:57:43.526434Z","shell.execute_reply.started":"2022-11-29T00:57:37.478848Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#import necessary libraries\n","import numpy as np \n","import pandas as pd\n","import json\n","from tqdm.notebook import tqdm\n","import matplotlib.pyplot as plt\n","import re\n","import gc\n","import seaborn as sns\n","\n","import tensorflow as tf\n","from nltk.corpus import stopwords\n","from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n","\n","from tensorflow.keras.layers import LSTM, Bidirectional, GlobalMaxPooling1D, SpatialDropout1D, Dense, Dropout, Input, concatenate, Conv1D, Activation, Flatten"]},{"cell_type":"code","execution_count":14,"metadata":{"_cell_guid":"40d8dfb3-f533-4d70-931e-4fa946030a47","_uuid":"69d63f4f-2686-419b-ab9e-2df8026e3c74","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:57:43.528847Z","iopub.status.busy":"2022-11-29T00:57:43.528596Z","iopub.status.idle":"2022-11-29T00:57:43.564030Z","shell.execute_reply":"2022-11-29T00:57:43.563325Z","shell.execute_reply.started":"2022-11-29T00:57:43.528811Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '../input/tensorflow2-question-answering/sample_submission.csv'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/var/folders/4n/5hy8313s1yzdx9m7b65ysf0h0002fj/T/ipykernel_17997/2166250489.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msample_submission\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"../input/tensorflow2-question-answering/sample_submission.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0msample_submission\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/site-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/site-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 950\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1440\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1442\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1733\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1735\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1736\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1737\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/site-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    854\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    857\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../input/tensorflow2-question-answering/sample_submission.csv'"]}],"source":["sample_submission = pd.read_csv(\"../input/tensorflow2-question-answering/sample_submission.csv\")\n","sample_submission.head(20)"]},{"cell_type":"code","execution_count":5,"metadata":{"_cell_guid":"aae1c16f-10b4-404a-8503-9e7c35d13743","_uuid":"888efd42-7163-43f8-b17f-4d9d51c93622","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:57:44.003093Z","iopub.status.busy":"2022-11-29T00:57:44.002790Z","iopub.status.idle":"2022-11-29T00:57:44.010688Z","shell.execute_reply":"2022-11-29T00:57:44.009996Z","shell.execute_reply.started":"2022-11-29T00:57:44.003058Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#path for data files\n","train_path = '../input/tensorflow2-question-answering/simplified-nq-train.jsonl'\n","test_path = '../input/tensorflow2-question-answering/simplified-nq-test.jsonl'"]},{"cell_type":"code","execution_count":26,"metadata":{"execution":{"iopub.execute_input":"2022-11-29T00:59:35.334525Z","iopub.status.busy":"2022-11-29T00:59:35.334222Z","iopub.status.idle":"2022-11-29T00:59:35.339790Z","shell.execute_reply":"2022-11-29T00:59:35.338977Z","shell.execute_reply.started":"2022-11-29T00:59:35.334493Z"},"trusted":true},"outputs":[],"source":["chunksize=2000"]},{"cell_type":"code","execution_count":2,"metadata":{"_cell_guid":"40b44574-cc00-4a6c-8cc2-018c2878fd97","_uuid":"f2c742fc-24d1-4990-b682-59c65eaa7e73","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T01:08:21.186323Z","iopub.status.busy":"2022-11-29T01:08:21.186023Z","iopub.status.idle":"2022-11-29T01:08:21.202464Z","shell.execute_reply":"2022-11-29T01:08:21.201422Z","shell.execute_reply.started":"2022-11-29T01:08:21.186276Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"ename":"NameError","evalue":"name 'chunksize' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_203/1683639904.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#read a sample of data files\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mread_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mchunksize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msample\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mreader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'chunksize' is not defined"]}],"source":["#read a sample of data files\n","def read_data(path, sample = True, chunksize = chunksize):\n","    if sample == True:\n","        df = []\n","        with open(path, 'r') as reader:\n","            for i in range(chunksize):\n","                df.append(json.loads(reader.readline()))\n","        df = pd.DataFrame(df)\n","        print('Sample data have {} rows and {} columns'.format(df.shape[0], df.shape[1]))\n","    else:\n","        df = pd.read_json(path, orient = 'records', lines = True)\n","        print('Sample data have {} rows and {} columns'.format(df.shape[0], df.shape[1]))\n","        gc.collect()\n","    return df\n","\n","train = read_data(train_path, sample = True)\n","test = read_data(test_path, sample = False)\n","train.head()"]},{"cell_type":"markdown","metadata":{"_cell_guid":"9daac710-cb46-4a7a-8eb8-8972f44544cc","_uuid":"3abefe1e-568d-40d2-bf59-1d3213adf3ca","trusted":true},"source":["# Exploratory Data Analysis"]},{"cell_type":"code","execution_count":1,"metadata":{"_cell_guid":"ee73597b-dda2-4b82-b48d-18a5cec84325","_uuid":"4625f4f4-1fc5-4231-a975-3c13df02dfd7","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T01:08:16.940043Z","iopub.status.busy":"2022-11-29T01:08:16.939464Z","iopub.status.idle":"2022-11-29T01:08:17.019739Z","shell.execute_reply":"2022-11-29T01:08:17.018540Z","shell.execute_reply.started":"2022-11-29T01:08:16.939932Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"ename":"NameError","evalue":"name 'read_data' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_203/2251487617.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'question_text'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'annotations'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'read_data' is not defined"]}],"source":["df = read_data(train_path, sample = True)\n","print(df['question_text'][1])\n","print(df['annotations'][1])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"328c6b3d-1b8b-47fa-abf3-f40d94c89495","_uuid":"7e118fd2-5a75-44d1-b1eb-ed20102010cb","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#check the distribution of word count in sample 10000 documents\n","doc_text_words = df['document_text'].apply(lambda x: len(x.split(' ')))\n","plt.figure(figsize=(12,6))\n","sns.kdeplot(doc_text_words.values,shade=True, color=\"r\").set_title('Distribution of text word count of ' + str(train_chunksize) + ' documents')"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"f96bc3cb-b362-42db-9bf0-fe2af52a543c","_uuid":"3550e917-7753-43cb-8037-0d4209ac3f59","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#long_answer_candidates\n","df.long_answer_candidates[0][:5]"]},{"cell_type":"code","execution_count":10,"metadata":{"_cell_guid":"d2bfbe90-8cbc-4d65-83f1-7a0a9674f917","_uuid":"62dbe439-8ade-4223-be94-7e929ea1c28a","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:05.637556Z","iopub.status.busy":"2022-11-29T00:58:05.636770Z","iopub.status.idle":"2022-11-29T00:58:05.644013Z","shell.execute_reply":"2022-11-29T00:58:05.643086Z","shell.execute_reply.started":"2022-11-29T00:58:05.637519Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["[{'yes_no_answer': 'NONE',\n","  'long_answer': {'start_token': 212, 'candidate_index': 15, 'end_token': 310},\n","  'short_answers': [{'start_token': 213, 'end_token': 215}],\n","  'annotation_id': 12034874153783787365}]"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["df.annotations[1][:100]"]},{"cell_type":"code","execution_count":11,"metadata":{"_cell_guid":"0c9b33f2-626d-4f1f-938c-7d81b510682c","_uuid":"41d3b2fe-e239-468a-9956-1afbfa2ecb32","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:06.929633Z","iopub.status.busy":"2022-11-29T00:58:06.929130Z","iopub.status.idle":"2022-11-29T00:58:06.936214Z","shell.execute_reply":"2022-11-29T00:58:06.935419Z","shell.execute_reply.started":"2022-11-29T00:58:06.929591Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["'how i.met your mother who is the mother'"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["df.question_text[1][:100]"]},{"cell_type":"code","execution_count":12,"metadata":{"_cell_guid":"3cb8168a-80ef-4877-a4ac-b5c17117f68d","_uuid":"33dc3c95-3eea-4718-8ebe-aeddf4f774fa","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:07.652667Z","iopub.status.busy":"2022-11-29T00:58:07.652057Z","iopub.status.idle":"2022-11-29T00:58:07.660336Z","shell.execute_reply":"2022-11-29T00:58:07.659494Z","shell.execute_reply.started":"2022-11-29T00:58:07.652612Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["'List of National Football League career quarterback wins leaders - wikipedia <H1> List of National F'"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["df.document_text[3][:100]"]},{"cell_type":"code","execution_count":13,"metadata":{"_cell_guid":"26aff107-9845-4237-b780-9f81d641282d","_uuid":"58a04458-4905-4e10-8478-ab452f2f6c18","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:08.226747Z","iopub.status.busy":"2022-11-29T00:58:08.226499Z","iopub.status.idle":"2022-11-29T00:58:09.302588Z","shell.execute_reply":"2022-11-29T00:58:09.301592Z","shell.execute_reply.started":"2022-11-29T00:58:08.226719Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Sample data have 2000 rows and 6 columns\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>document_text</th>\n","      <th>long_answer_candidates</th>\n","      <th>question_text</th>\n","      <th>annotations</th>\n","      <th>document_url</th>\n","      <th>example_id</th>\n","      <th>yes_no</th>\n","      <th>long</th>\n","      <th>short</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Email marketing - Wikipedia &lt;H1&gt; Email marketi...</td>\n","      <td>[{'start_token': 14, 'top_level': True, 'end_t...</td>\n","      <td>which is the most common use of opt-in e-mail ...</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Em...</td>\n","      <td>5655493461695504401</td>\n","      <td>NONE</td>\n","      <td>[1952, 2019]</td>\n","      <td>[{'start_token': 1960, 'end_token': 1969}]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>The Mother ( How I Met Your Mother ) - wikiped...</td>\n","      <td>[{'start_token': 28, 'top_level': True, 'end_t...</td>\n","      <td>how i.met your mother who is the mother</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Th...</td>\n","      <td>5328212470870865242</td>\n","      <td>NONE</td>\n","      <td>[212, 310]</td>\n","      <td>[{'start_token': 213, 'end_token': 215}]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Human fertilization - wikipedia &lt;H1&gt; Human fer...</td>\n","      <td>[{'start_token': 14, 'top_level': True, 'end_t...</td>\n","      <td>what type of fertilisation takes place in humans</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Hu...</td>\n","      <td>4435104480114867852</td>\n","      <td>NONE</td>\n","      <td>[319, 438]</td>\n","      <td>[]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>List of National Football League career quarte...</td>\n","      <td>[{'start_token': 28, 'top_level': True, 'end_t...</td>\n","      <td>who had the most wins in the nfl</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Li...</td>\n","      <td>5289242154789678439</td>\n","      <td>NONE</td>\n","      <td>[509, 576]</td>\n","      <td>[{'start_token': 512, 'end_token': 514}]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Roanoke Colony - wikipedia &lt;H1&gt; Roanoke Colony...</td>\n","      <td>[{'start_token': 32, 'top_level': True, 'end_t...</td>\n","      <td>what happened to the lost settlement of roanoke</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Ro...</td>\n","      <td>5489863933082811018</td>\n","      <td>NONE</td>\n","      <td>[-1, -1]</td>\n","      <td>[]</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1995</th>\n","      <td>Grace and Frankie - Wikipedia &lt;H1&gt; Grace and F...</td>\n","      <td>[{'start_token': 10, 'top_level': True, 'end_t...</td>\n","      <td>how long is each grace and frankie episode</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Gr...</td>\n","      <td>-7716384782891686197</td>\n","      <td>NONE</td>\n","      <td>[10, 399]</td>\n","      <td>[{'start_token': 300, 'end_token': 304}]</td>\n","    </tr>\n","    <tr>\n","      <th>1996</th>\n","      <td>Cellular respiration - wikipedia &lt;H1&gt; Cellular...</td>\n","      <td>[{'start_token': 10, 'top_level': True, 'end_t...</td>\n","      <td>after complete oxidation of a glucose molecule...</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Ce...</td>\n","      <td>8933277615800380148</td>\n","      <td>NONE</td>\n","      <td>[780, 883]</td>\n","      <td>[{'start_token': 796, 'end_token': 799}]</td>\n","    </tr>\n","    <tr>\n","      <th>1997</th>\n","      <td>Some Like It Hot ( song ) - wikipedia &lt;H1&gt; Som...</td>\n","      <td>[{'start_token': 18, 'top_level': True, 'end_t...</td>\n","      <td>who sings the song some like it hot</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=So...</td>\n","      <td>-6909007989280228395</td>\n","      <td>NONE</td>\n","      <td>[-1, -1]</td>\n","      <td>[]</td>\n","    </tr>\n","    <tr>\n","      <th>1998</th>\n","      <td>Princes in the Tower - wikipedia &lt;H1&gt; Princes ...</td>\n","      <td>[{'start_token': 44, 'top_level': True, 'end_t...</td>\n","      <td>who killed the twins in the tower of london</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Pr...</td>\n","      <td>1501574334625895729</td>\n","      <td>NONE</td>\n","      <td>[-1, -1]</td>\n","      <td>[]</td>\n","    </tr>\n","    <tr>\n","      <th>1999</th>\n","      <td>Pascal and Maximus - wikipedia &lt;H1&gt; Pascal and...</td>\n","      <td>[{'start_token': 10, 'top_level': True, 'end_t...</td>\n","      <td>what is the name of the chameleon in tangled</td>\n","      <td>[{'yes_no_answer': 'NONE', 'long_answer': {'st...</td>\n","      <td>https://en.wikipedia.org//w/index.php?title=Pa...</td>\n","      <td>2281183566755493128</td>\n","      <td>NONE</td>\n","      <td>[2087, 2292]</td>\n","      <td>[{'start_token': 2109, 'end_token': 2110}]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2000 rows × 9 columns</p>\n","</div>"],"text/plain":["                                          document_text  \\\n","0     Email marketing - Wikipedia <H1> Email marketi...   \n","1     The Mother ( How I Met Your Mother ) - wikiped...   \n","2     Human fertilization - wikipedia <H1> Human fer...   \n","3     List of National Football League career quarte...   \n","4     Roanoke Colony - wikipedia <H1> Roanoke Colony...   \n","...                                                 ...   \n","1995  Grace and Frankie - Wikipedia <H1> Grace and F...   \n","1996  Cellular respiration - wikipedia <H1> Cellular...   \n","1997  Some Like It Hot ( song ) - wikipedia <H1> Som...   \n","1998  Princes in the Tower - wikipedia <H1> Princes ...   \n","1999  Pascal and Maximus - wikipedia <H1> Pascal and...   \n","\n","                                 long_answer_candidates  \\\n","0     [{'start_token': 14, 'top_level': True, 'end_t...   \n","1     [{'start_token': 28, 'top_level': True, 'end_t...   \n","2     [{'start_token': 14, 'top_level': True, 'end_t...   \n","3     [{'start_token': 28, 'top_level': True, 'end_t...   \n","4     [{'start_token': 32, 'top_level': True, 'end_t...   \n","...                                                 ...   \n","1995  [{'start_token': 10, 'top_level': True, 'end_t...   \n","1996  [{'start_token': 10, 'top_level': True, 'end_t...   \n","1997  [{'start_token': 18, 'top_level': True, 'end_t...   \n","1998  [{'start_token': 44, 'top_level': True, 'end_t...   \n","1999  [{'start_token': 10, 'top_level': True, 'end_t...   \n","\n","                                          question_text  \\\n","0     which is the most common use of opt-in e-mail ...   \n","1               how i.met your mother who is the mother   \n","2      what type of fertilisation takes place in humans   \n","3                      who had the most wins in the nfl   \n","4       what happened to the lost settlement of roanoke   \n","...                                                 ...   \n","1995         how long is each grace and frankie episode   \n","1996  after complete oxidation of a glucose molecule...   \n","1997                who sings the song some like it hot   \n","1998        who killed the twins in the tower of london   \n","1999       what is the name of the chameleon in tangled   \n","\n","                                            annotations  \\\n","0     [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","1     [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","2     [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","3     [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","4     [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","...                                                 ...   \n","1995  [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","1996  [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","1997  [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","1998  [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","1999  [{'yes_no_answer': 'NONE', 'long_answer': {'st...   \n","\n","                                           document_url           example_id  \\\n","0     https://en.wikipedia.org//w/index.php?title=Em...  5655493461695504401   \n","1     https://en.wikipedia.org//w/index.php?title=Th...  5328212470870865242   \n","2     https://en.wikipedia.org//w/index.php?title=Hu...  4435104480114867852   \n","3     https://en.wikipedia.org//w/index.php?title=Li...  5289242154789678439   \n","4     https://en.wikipedia.org//w/index.php?title=Ro...  5489863933082811018   \n","...                                                 ...                  ...   \n","1995  https://en.wikipedia.org//w/index.php?title=Gr... -7716384782891686197   \n","1996  https://en.wikipedia.org//w/index.php?title=Ce...  8933277615800380148   \n","1997  https://en.wikipedia.org//w/index.php?title=So... -6909007989280228395   \n","1998  https://en.wikipedia.org//w/index.php?title=Pr...  1501574334625895729   \n","1999  https://en.wikipedia.org//w/index.php?title=Pa...  2281183566755493128   \n","\n","     yes_no          long                                       short  \n","0      NONE  [1952, 2019]  [{'start_token': 1960, 'end_token': 1969}]  \n","1      NONE    [212, 310]    [{'start_token': 213, 'end_token': 215}]  \n","2      NONE    [319, 438]                                          []  \n","3      NONE    [509, 576]    [{'start_token': 512, 'end_token': 514}]  \n","4      NONE      [-1, -1]                                          []  \n","...     ...           ...                                         ...  \n","1995   NONE     [10, 399]    [{'start_token': 300, 'end_token': 304}]  \n","1996   NONE    [780, 883]    [{'start_token': 796, 'end_token': 799}]  \n","1997   NONE      [-1, -1]                                          []  \n","1998   NONE      [-1, -1]                                          []  \n","1999   NONE  [2087, 2292]  [{'start_token': 2109, 'end_token': 2110}]  \n","\n","[2000 rows x 9 columns]"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["#check long_answers_distribution\n","def preprocess_data():\n","    df = read_data(train_path, train_chunksize)\n","    df['yes_no'] = df.annotations.apply(lambda x: x[0]['yes_no_answer'])\n","    df['long'] = df.annotations.apply(lambda x: [x[0]['long_answer']['start_token'], x[0]['long_answer']['end_token']])\n","    df['short'] = df.annotations.apply(lambda x: x[0]['short_answers'])\n","    return df\n","df = preprocess_data()\n","df"]},{"cell_type":"code","execution_count":14,"metadata":{"_cell_guid":"6fd9a950-40a2-4adb-bd1f-402e0860eb88","_uuid":"2dc71ecb-e005-4ec6-829d-90c96db56c24","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:09.304647Z","iopub.status.busy":"2022-11-29T00:58:09.304328Z","iopub.status.idle":"2022-11-29T00:58:09.313604Z","shell.execute_reply":"2022-11-29T00:58:09.312753Z","shell.execute_reply.started":"2022-11-29T00:58:09.304611Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["NONE    1977\n","YES       17\n","NO         6\n","Name: yes_no, dtype: int64"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["df['yes_no'].value_counts()"]},{"cell_type":"code","execution_count":15,"metadata":{"_cell_guid":"962c7242-1dda-4ad3-a615-075688f246f1","_uuid":"6193c58b-82e4-4cac-94d7-a1336b41a765","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:11.793741Z","iopub.status.busy":"2022-11-29T00:58:11.793145Z","iopub.status.idle":"2022-11-29T00:58:11.802580Z","shell.execute_reply":"2022-11-29T00:58:11.801563Z","shell.execute_reply.started":"2022-11-29T00:58:11.793704Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["2000"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["# filter the answers that exist\n","df_ans_exists = df.long.apply(lambda x: \"Answer Doesn't exist\" if x == -1 else \"Answer Exists\") == \"Answer Exists\"\n","df_ans_exists.count()"]},{"cell_type":"code","execution_count":16,"metadata":{"_cell_guid":"4efc0b60-79ed-497c-9379-0dca16dae846","_uuid":"9c3ff3d7-671f-4876-9e5a-dbe921c7c25d","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:14.237468Z","iopub.status.busy":"2022-11-29T00:58:14.236920Z","iopub.status.idle":"2022-11-29T00:58:14.248241Z","shell.execute_reply":"2022-11-29T00:58:14.247430Z","shell.execute_reply.started":"2022-11-29T00:58:14.237428Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["Answer Exists           0.519\n","Answer Doesn't exist    0.481\n","Name: long, dtype: float64"]},"metadata":{},"output_type":"display_data"}],"source":["#check if there are questions that do not have an answer\n","display(df.long.apply(lambda x: \"Answer Doesn't exist\" if x[0] == -1 else \"Answer Exists\").value_counts(normalize=True))"]},{"cell_type":"code","execution_count":17,"metadata":{"_cell_guid":"efe128a5-dcf3-4f4f-9bb5-d22ddefdd531","_uuid":"88198e75-ce95-4fa6-8843-c00949b0cd6d","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:14.910149Z","iopub.status.busy":"2022-11-29T00:58:14.909819Z","iopub.status.idle":"2022-11-29T00:58:14.923292Z","shell.execute_reply":"2022-11-29T00:58:14.922302Z","shell.execute_reply.started":"2022-11-29T00:58:14.910120Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["NONE    0.9885\n","YES     0.0085\n","NO      0.0030\n","Name: yes_no, dtype: float64"]},"metadata":{},"output_type":"display_data"}],"source":["#check the dstribution of Yes and No Answers\n","yes_no_dist = df[df_ans_exists].yes_no.value_counts(normalize=True)\n","display(yes_no_dist)"]},{"cell_type":"code","execution_count":18,"metadata":{"_cell_guid":"54bf507c-0622-4da6-8f83-540ff7483362","_uuid":"403ed196-74ba-4c11-b312-1e11e5a38055","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:15.626348Z","iopub.status.busy":"2022-11-29T00:58:15.626074Z","iopub.status.idle":"2022-11-29T00:58:15.880099Z","shell.execute_reply":"2022-11-29T00:58:15.879476Z","shell.execute_reply.started":"2022-11-29T00:58:15.626293Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'Distribution of short answers in answerable questions')"]},"execution_count":18,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["#checking the distribution of short answers\n","short_dist = df[df_ans_exists].short.apply(lambda x: \"Short answer exists\" if len(x) > 0 else \"Short answer doesn't exist\").value_counts(normalize=True)\n","plt.figure(figsize=(8,6))\n","sns.barplot(x=short_dist.index,y=short_dist.values,hue=short_dist.index,palette = \"Reds\").set_title(\"Distribution of short answers in answerable questions\")"]},{"cell_type":"code","execution_count":22,"metadata":{"_cell_guid":"2be226ac-c6a1-44dd-b269-b87265fd4d8e","_uuid":"20d16338-cb1b-45b2-8806-6af9b6199913","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:31.980067Z","iopub.status.busy":"2022-11-29T00:58:31.979799Z","iopub.status.idle":"2022-11-29T00:58:32.290367Z","shell.execute_reply":"2022-11-29T00:58:32.289684Z","shell.execute_reply.started":"2022-11-29T00:58:31.980035Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'Distribution of Number of Short Answers in answerable questions')"]},"execution_count":22,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 864x432 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["short_ans_dist = df[df_ans_exists].short.apply(len).value_counts(normalize=True)\n","short_ans_dist = pd.concat([short_ans_dist.loc[[0,1,],], pd.Series(short_ans_dist.loc[3:].sum(),index=['>=3'])])\n","short_ans_dist = short_ans_dist.rename(index={0: 'No Short answer',1:\"1 or 2 Short answers\",\">=3\":\"More than 2 short answers\"})\n","plt.figure(figsize=(12,6))\n","sns.barplot(x=short_ans_dist.index,y=short_ans_dist.values,hue=short_ans_dist.index,palette = \"Reds\").set_title(\"Distribution of Number of Short Answers in answerable questions\")"]},{"cell_type":"code","execution_count":23,"metadata":{"_cell_guid":"2f3055aa-af48-4180-9e4a-106c0e115383","_uuid":"7965dc56-be52-4cd3-80a6-ea01141584e0","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:33.796184Z","iopub.status.busy":"2022-11-29T00:58:33.795250Z","iopub.status.idle":"2022-11-29T00:58:33.824052Z","shell.execute_reply":"2022-11-29T00:58:33.822729Z","shell.execute_reply.started":"2022-11-29T00:58:33.796115Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[{"ename":"NameError","evalue":"name 'train' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_17/3422943264.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0;32mreturn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Missing data exists in train set: \"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcheck_missing_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Missing data exists in test set: \"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcheck_missing_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'train' is not defined"]}],"source":["#check if there are missing data in the datasets\n","def check_missing_data(df):\n","    missing_value=df.isna().sum().any()\n","    if missing_value==True:\n","        total = df.isnull().sum()\n","        percent = (df.isnull().sum())/(df.isnull().count()*100)\n","        output = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n","        data_type = []\n","\n","        for col in df.columns:\n","            dtype = str(train[col].dtype)\n","            data_type.append(dtype)\n","        output['Types'] = data_type\n","        return(np.transpose(output))\n","    else:\n","        return(False)\n","    \n","print(\"Missing data exists in train set: \",check_missing_data(train))\n","print(\"Missing data exists in test set: \",check_missing_data(test))"]},{"cell_type":"code","execution_count":21,"metadata":{"_cell_guid":"54b5e24d-d05a-43da-a51a-dfc2864d2620","_uuid":"2409176b-9d6c-48c8-97f4-c42336f3dc6f","collapsed":false,"execution":{"iopub.execute_input":"2022-11-29T00:58:28.914267Z","iopub.status.busy":"2022-11-29T00:58:28.914025Z","iopub.status.idle":"2022-11-29T00:58:28.919438Z","shell.execute_reply":"2022-11-29T00:58:28.918420Z","shell.execute_reply.started":"2022-11-29T00:58:28.914238Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#check count values in each column\n","def count_values_in_column(data,feature):\n","    total=data.loc[:,feature].value_counts(dropna=False)\n","    percentage=round(data.loc[:,feature].value_counts(dropna=False,normalize=True)*100,2)\n","    return pd.concat([total,percentage],axis=1,keys=['Total','Percentage'])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"94d7e1a2-53ae-4499-a1ff-9bd592ee0053","_uuid":"77ff21ac-2656-4d17-a57f-e0f8bfaba2a1","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.907000Z","iopub.status.idle":"2022-11-28T23:27:20.907617Z","shell.execute_reply":"2022-11-28T23:27:20.907408Z","shell.execute_reply.started":"2022-11-28T23:27:20.907383Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["count_values_in_column(df,'yes_no')"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"5f1d2a9a-7472-4888-98e4-e8be5b57f65f","_uuid":"745d3c89-cfbc-45b1-801a-f20e850efde5","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.909719Z","iopub.status.idle":"2022-11-28T23:27:20.910162Z","shell.execute_reply":"2022-11-28T23:27:20.909947Z","shell.execute_reply.started":"2022-11-28T23:27:20.909923Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#count unique values in each column\n","def unique_values_in_column(data,feature):\n","    unique_val=pd.Series(data.loc[:,feature].unique())\n","    return pd.concat([unique_val],axis=1,keys=['Unique Values'])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"c22e57e9-10d4-4c38-9412-b204d37089d4","_uuid":"fed758ce-80c0-4e0e-a9ef-73dba274312b","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.911460Z","iopub.status.idle":"2022-11-28T23:27:20.912101Z","shell.execute_reply":"2022-11-28T23:27:20.911890Z","shell.execute_reply.started":"2022-11-28T23:27:20.911865Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["unique_values_in_column(df,'document_text')"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"3b533ddc-f003-43a4-954a-8ee09846c189","_uuid":"af3a1a2a-a871-400c-9da6-86a71f413f12","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.913489Z","iopub.status.idle":"2022-11-28T23:27:20.913926Z","shell.execute_reply":"2022-11-28T23:27:20.913725Z","shell.execute_reply.started":"2022-11-28T23:27:20.913701Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#find duplicated values in each column\n","def duplicated_values_data(data):\n","    dup=[]\n","    columns=data.columns\n","    for i in data.columns:\n","        dup.append(sum(data[i].duplicated()))\n","    return pd.concat([pd.Series(columns),pd.Series(dup)],axis=1,keys=['Columns','Duplicate count'])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"6420c14d-3244-4b03-9618-0e273680ba2c","_uuid":"5a9e8095-3f92-4569-8301-42eef123a076","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.915316Z","iopub.status.idle":"2022-11-28T23:27:20.915757Z","shell.execute_reply":"2022-11-28T23:27:20.915527Z","shell.execute_reply.started":"2022-11-28T23:27:20.915505Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["duplicated_values_data(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"9dcdd44b-b516-4828-ad62-38b668d27649","_uuid":"7b8292cc-debe-4af6-ad5e-94fa2e5ebb2d","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.917289Z","iopub.status.idle":"2022-11-28T23:27:20.917733Z","shell.execute_reply":"2022-11-28T23:27:20.917505Z","shell.execute_reply.started":"2022-11-28T23:27:20.917483Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"bc095174-504d-4e40-8b0d-c7b403cc55ae","_uuid":"eacdb2aa-a613-41fb-9a40-cf18a5c57c5b","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.919122Z","iopub.status.idle":"2022-11-28T23:27:20.919556Z","shell.execute_reply":"2022-11-28T23:27:20.919350Z","shell.execute_reply.started":"2022-11-28T23:27:20.919326Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#remove hash texts in questions\n","def find_hash(text):\n","    line=re.findall(r'(?<=#)\\w+',text)\n","    return \" \".join(line)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"b666d810-dcbe-4a36-85e2-4866335582bf","_uuid":"b7b25e82-62a3-417c-9af1-08364f8032de","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.921014Z","iopub.status.idle":"2022-11-28T23:27:20.921538Z","shell.execute_reply":"2022-11-28T23:27:20.921299Z","shell.execute_reply.started":"2022-11-28T23:27:20.921272Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["df['hash']=df['question_text'].apply(lambda x: find_hash(x))"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"a03bee6b-3637-4fdd-84f4-3e499bd923e1","_uuid":"9100b656-879b-4299-95d8-71d499163d52","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.923061Z","iopub.status.idle":"2022-11-28T23:27:20.923502Z","shell.execute_reply":"2022-11-28T23:27:20.923285Z","shell.execute_reply.started":"2022-11-28T23:27:20.923261Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["df['hash'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"593b0b90-6241-4a60-bc9e-3b899e1dfd0c","_uuid":"e85953fc-c834-49d4-85e7-bde6de9783be","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.925004Z","iopub.status.idle":"2022-11-28T23:27:20.925421Z","shell.execute_reply":"2022-11-28T23:27:20.925221Z","shell.execute_reply.started":"2022-11-28T23:27:20.925197Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["unique_values_in_column(df,'hash').value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"b9486f4d-c418-421d-8f5f-2b9ddc91a965","_uuid":"0af0eaf1-747c-42ad-a396-19471662282a","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.926872Z","iopub.status.idle":"2022-11-28T23:27:20.927319Z","shell.execute_reply":"2022-11-28T23:27:20.927098Z","shell.execute_reply.started":"2022-11-28T23:27:20.927073Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# df['hash'] = df['hash'].fillna(df['document_text'])\n","df.loc[df['hash'].str.strip() == '', 'hash'] = df['document_text']"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"81283814-480d-416e-bdcc-a71acb880d01","_uuid":"3c550d00-913c-4187-9ca0-4cc7db35058d","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.928835Z","iopub.status.idle":"2022-11-28T23:27:20.929251Z","shell.execute_reply":"2022-11-28T23:27:20.929042Z","shell.execute_reply.started":"2022-11-28T23:27:20.929020Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["df"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"8b8fccd4-e7f4-49d3-9de1-e5f8f784df40","_uuid":"40fd9d06-6e2c-4fc5-9eb0-c63403d48efb","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.930816Z","iopub.status.idle":"2022-11-28T23:27:20.931256Z","shell.execute_reply":"2022-11-28T23:27:20.931043Z","shell.execute_reply.started":"2022-11-28T23:27:20.931020Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#remove punctuations\n","def find_punct(text):\n","    line = re.findall(r'[!\"\\$%&\\'()*+,\\-.\\/:;=#@?\\[\\\\\\]^_`{|}~]*', text)\n","    string=\"\".join(line)\n","    return list(string)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"b64ba47f-34ad-4555-b292-826975b38de3","_uuid":"6a5353cd-61c4-427f-b4e9-2277d4a87b0c","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.932742Z","iopub.status.idle":"2022-11-28T23:27:20.933164Z","shell.execute_reply":"2022-11-28T23:27:20.932957Z","shell.execute_reply.started":"2022-11-28T23:27:20.932933Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["df['punctuation']=df['question_text'].apply(lambda x : find_punct(x))\n","df.loc[df['hash'].str.strip() == '', 'hash'] = df['question_text']"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"d67d78d8-bbe1-4f5c-a13e-db677bac0ef7","_uuid":"e1dcfda4-5697-4123-9cd6-4a266d5ca0fd","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.934572Z","iopub.status.idle":"2022-11-28T23:27:20.935042Z","shell.execute_reply":"2022-11-28T23:27:20.934822Z","shell.execute_reply.started":"2022-11-28T23:27:20.934797Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["df"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"67a38933-a225-41f1-8b2f-d06e47f346cc","_uuid":"95c68905-b8ef-4396-947f-cbbeb5b619d6","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.936435Z","iopub.status.idle":"2022-11-28T23:27:20.936887Z","shell.execute_reply":"2022-11-28T23:27:20.936655Z","shell.execute_reply.started":"2022-11-28T23:27:20.936631Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["np.unique(df['punctuation'])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"8d3bbc61-edce-46ae-a898-f21dda8ce32d","_uuid":"c39693f4-601d-4371-9ec9-172970ed8bb9","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.938326Z","iopub.status.idle":"2022-11-28T23:27:20.938788Z","shell.execute_reply":"2022-11-28T23:27:20.938553Z","shell.execute_reply.started":"2022-11-28T23:27:20.938527Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# define training parameters \n","num_train_ques = 2000\n","num_val_ques = 2050\n","sample_rate = 15"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"0b689dbe-c31f-415e-89b3-72b28fef0dfa","_uuid":"b1d67ab7-776b-4678-bf72-ad6387fcacc4","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.940221Z","iopub.status.idle":"2022-11-28T23:27:20.940654Z","shell.execute_reply":"2022-11-28T23:27:20.940455Z","shell.execute_reply.started":"2022-11-28T23:27:20.940421Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# define model parameters\n","epochs = 40\n","batch_size = 64\n","class_weights = {0: 0.5, 1: 5.}"]},{"cell_type":"markdown","metadata":{"_cell_guid":"d74529a2-e123-4881-b93a-fe65c6f80f4a","_uuid":"4490f4bc-720b-48a8-a055-1ea31e16824a","trusted":true},"source":["# **Part 1- identifying correct long answer to a question**"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"18e0d71f-b73f-41f0-9eb4-afd52ce796ca","_uuid":"8a5833c1-6a56-4f0d-ae60-bd755a01ab9a","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.942231Z","iopub.status.idle":"2022-11-28T23:27:20.942694Z","shell.execute_reply":"2022-11-28T23:27:20.942470Z","shell.execute_reply.started":"2022-11-28T23:27:20.942448Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["def get_question_and_document(line):\n","    question = line['question_text']\n","    text = line['document_text'].split(' ')\n","    annotations = line['annotations'][0]    \n","    return question, text, annotations\n","                \n","def get_long_candidate(i, annotations, candidate):\n","    # check if this candidate is the correct long answer\n","    if i == annotations['long_answer']['candidate_index']:\n","        label = True\n","    else:\n","        label = False\n","\n","    # get place where long answer starts and ends in the document text\n","    long_start = candidate['start_token']\n","    long_end = candidate['end_token']    \n","    return label, long_start, long_end\n","\n","def form_data_row(question, label, text, long_start, long_end):\n","    row = {\n","        'question': question,\n","        'long_answer': ' '.join(text[long_start:long_end]),\n","        'is_long_answer': label,\n","    }    \n","    return row"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"edd36871-c141-44e9-b509-2ab78edbc383","_uuid":"f88f13d4-ef72-4389-872b-506d72ad1434","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.944167Z","iopub.status.idle":"2022-11-28T23:27:20.944607Z","shell.execute_reply":"2022-11-28T23:27:20.944392Z","shell.execute_reply.started":"2022-11-28T23:27:20.944368Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["def load_data(file_path, questions_start, questions_end):\n","    rows = []\n","    \n","    with open(file_path) as file:\n","        for i in tqdm(range(questions_start, questions_end)):\n","            line = file.readline()\n","            line = json.loads(line)\n","            question, text, annotations = get_question_and_document(line)\n","\n","            for i, candidate in enumerate(line['long_answer_candidates']):\n","                label, long_start, long_end = get_long_candidate(i, annotations, candidate)\n","\n","                if label == True or (i % sample_rate == 0):\n","                    rows.append(\n","                        form_data_row(question, label, text, long_start, long_end)\n","                    )        \n","    return pd.DataFrame(rows)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"30f3e6b2-a6a7-423a-bfe1-e3c35b1c5eea","_uuid":"0459e078-fd0e-43e9-93be-1f5d74938730","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.946004Z","iopub.status.idle":"2022-11-28T23:27:20.946437Z","shell.execute_reply":"2022-11-28T23:27:20.946226Z","shell.execute_reply.started":"2022-11-28T23:27:20.946201Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_df = load_data(train_path, 0, num_train_ques)\n","test_df = load_data(train_path, num_train_ques, 3000)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:20.947874Z","iopub.status.idle":"2022-11-28T23:27:20.948334Z","shell.execute_reply":"2022-11-28T23:27:20.948096Z","shell.execute_reply.started":"2022-11-28T23:27:20.948072Z"},"trusted":true},"outputs":[],"source":["print(len(train_df), len(test_df))"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"87cd6d8d-9799-41fd-ade9-411f92cf0cc8","_uuid":"ca608f25-36df-42ba-805c-9ae25e7549d9","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.949838Z","iopub.status.idle":"2022-11-28T23:27:20.950274Z","shell.execute_reply":"2022-11-28T23:27:20.950060Z","shell.execute_reply.started":"2022-11-28T23:27:20.950036Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_df.head(5)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"39ba96db-a811-4d12-9ce7-36c1265462d6","_uuid":"f4874d75-cd75-4581-87ec-1df04b231cde","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.951654Z","iopub.status.idle":"2022-11-28T23:27:20.952105Z","shell.execute_reply":"2022-11-28T23:27:20.951896Z","shell.execute_reply.started":"2022-11-28T23:27:20.951872Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["test_df.head(5)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"ce6cd42c-dcff-4e38-8311-f48465d85ab8","_uuid":"26f2fbca-4bf3-4216-a404-2e2bd48802ea","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.954434Z","iopub.status.idle":"2022-11-28T23:27:20.955187Z","shell.execute_reply":"2022-11-28T23:27:20.954952Z","shell.execute_reply.started":"2022-11-28T23:27:20.954927Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_df.head(10)['long_answer']"]},{"cell_type":"markdown","metadata":{"_cell_guid":"2cc2abf9-7209-4aef-a221-ed6379e0bf8f","_uuid":"9bbbc634-0831-48ca-a2f9-cb9b46707acd","execution":{"iopub.execute_input":"2022-01-07T13:00:09.060503Z","iopub.status.busy":"2022-01-07T13:00:09.060209Z","iopub.status.idle":"2022-01-07T13:00:09.065406Z","shell.execute_reply":"2022-01-07T13:00:09.064588Z","shell.execute_reply.started":"2022-01-07T13:00:09.060471Z"},"trusted":true},"source":["# **Pre-processing texts**"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"f4903969-c538-4a16-97c6-0592da7293c1","_uuid":"29e7fb7b-4b04-48f9-b0b2-7ed60c1183cd","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.956496Z","iopub.status.idle":"2022-11-28T23:27:20.957358Z","shell.execute_reply":"2022-11-28T23:27:20.957104Z","shell.execute_reply.started":"2022-11-28T23:27:20.957080Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#cleaning texts by removing stopwords \n","def remove_stopwords(sentence):\n","    words = sentence.split()\n","    words = [word for word in words if word not in stopwords.words('english')]\n","    return ' '.join(words)\n","\n","#removing html tags \n","def remove_html(sentence):\n","    html = re.compile(r'<.*?>` `` ')\n","    return html.sub(r'', sentence)\n","\n","#returns the pre-processed dataframe for long answers and questions\n","def preprocessed_df(df):\n","    df['long_answer'] = df['long_answer'].apply(lambda x : remove_stopwords(x))\n","    df['long_answer'] = df['long_answer'].apply(lambda x : remove_html(x))\n","\n","    df['question'] = df['question'].apply(lambda x : remove_stopwords(x))\n","    df['question'] = df['question'].apply(lambda x : remove_html(x))\n","    \n","    return df"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"15a745b4-bc75-4cdb-a7b1-e048ce395739","_uuid":"45803248-171a-4ce5-9c58-b80c1f4b8ee3","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.958627Z","iopub.status.idle":"2022-11-28T23:27:20.959629Z","shell.execute_reply":"2022-11-28T23:27:20.959398Z","shell.execute_reply.started":"2022-11-28T23:27:20.959370Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#Count vectorizer for N grams\n","\n","def ngrams_top(corpus,ngram_range,n=None):\n","    \"\"\"\n","    List the top n words in a vocabulary according to occurrence in a text corpus.\n","    \"\"\"\n","    vec = CountVectorizer(stop_words = 'english',ngram_range=ngram_range).fit(corpus)\n","    bag_of_words = vec.transform(corpus)\n","    sum_words = bag_of_words.sum(axis=0) \n","    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n","    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n","    total_list=words_freq[:n]\n","    df=pd.DataFrame(total_list,columns=['text','count'])\n","    return df"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"64572409-a753-4575-93e9-49e85539351a","_uuid":"c7ae7b9d-0228-4815-b051-ba1eac41db81","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.960809Z","iopub.status.idle":"2022-11-28T23:27:20.961907Z","shell.execute_reply":"2022-11-28T23:27:20.961648Z","shell.execute_reply.started":"2022-11-28T23:27:20.961620Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["ngrams_top(df['question_text'],(3,3),n=10)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:20.963109Z","iopub.status.idle":"2022-11-28T23:27:20.964068Z","shell.execute_reply":"2022-11-28T23:27:20.963819Z","shell.execute_reply.started":"2022-11-28T23:27:20.963793Z"},"trusted":true},"outputs":[],"source":["import pickle\n","import os\n","\n","def pickle_dataset(obj_filepath, df):\n","    obj = None\n","\n","    if os.path.isfile(obj_filepath):\n","        with open(obj_filepath, 'rb') as f:\n","            obj = pickle.load(f)\n","    else:\n","        with open(obj_filepath, 'wb') as f:\n","            obj = preprocessed_df(df)\n","            pickle.dump(obj, f)\n","            \n","    return obj"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:20.965440Z","iopub.status.idle":"2022-11-28T23:27:20.966474Z","shell.execute_reply":"2022-11-28T23:27:20.966243Z","shell.execute_reply.started":"2022-11-28T23:27:20.966216Z"},"trusted":true},"outputs":[],"source":["train_df = pickle_dataset('../input/df-files-iva-final/train_df.pkl', train_df)\n","print(len(train_df))\n","train_df.head(5)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:20.967579Z","iopub.status.idle":"2022-11-28T23:27:20.968537Z","shell.execute_reply":"2022-11-28T23:27:20.968322Z","shell.execute_reply.started":"2022-11-28T23:27:20.968297Z"},"trusted":true},"outputs":[],"source":["test_df = pickle_dataset('../input/df-files-iva-final/test_df.pkl', test_df)\n","print(len(test_df))\n","test_df.head(5)"]},{"cell_type":"markdown","metadata":{},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"373d5c46-2bb0-40c5-9326-d00a19022bf2","_uuid":"83df16e0-3980-4998-966a-dc24c59ccc2c","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.969765Z","iopub.status.idle":"2022-11-28T23:27:20.970675Z","shell.execute_reply":"2022-11-28T23:27:20.970446Z","shell.execute_reply.started":"2022-11-28T23:27:20.970408Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_df['long_answer']"]},{"cell_type":"markdown","metadata":{"_cell_guid":"629117ad-bd44-4d88-9e14-b13fba17ec9e","_uuid":"6d6bf3af-e9e3-498e-a555-b68db9efb2e0","trusted":true},"source":["# Tokenizing the texts"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"50e5258c-0b51-45c3-a455-77ad5a983198","_uuid":"41bf039f-63c1-4a96-b995-dc7c3fd6c269","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.971984Z","iopub.status.idle":"2022-11-28T23:27:20.972891Z","shell.execute_reply":"2022-11-28T23:27:20.972647Z","shell.execute_reply.started":"2022-11-28T23:27:20.972621Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# define tokenization parameters\n","filters = '!\"''#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n'\n","lower_case = True\n","max_len = 500 #max lenght of a sentence input in to the model"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"54377506-7110-4110-8b54-e9b0a8e4333c","_uuid":"847ea33b-2ad0-436a-8cd1-d7152380f72e","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.974235Z","iopub.status.idle":"2022-11-28T23:27:20.975069Z","shell.execute_reply":"2022-11-28T23:27:20.974849Z","shell.execute_reply.started":"2022-11-28T23:27:20.974824Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#assigning a numeric index to each unique word in the dataset so that an array of integers\n","def define_tokenizer(series):\n","    sentences = pd.concat(series)    \n","    tokenizer = tf.keras.preprocessing.text.Tokenizer(lower=lower_case,filters=filters  )\n","    tokenizer.fit_on_texts(sentences)\n","    return tokenizer\n","\n","#encoding, rest with 0 if max_len>no.of words in sentence \n","def encode(sentences, tokenizer):\n","    encoded_sentences = tokenizer.texts_to_sequences(sentences)\n","    encoded_sentences = tf.keras.preprocessing.sequence.pad_sequences(encoded_sentences,\n","                                                                      maxlen=max_len, padding='post')\n","    return encoded_sentences"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"de53293a-d77b-4b2d-8b08-004a5494e6e6","_uuid":"4a3721cf-b095-409b-86c9-01002758f509","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.976346Z","iopub.status.idle":"2022-11-28T23:27:20.977268Z","shell.execute_reply":"2022-11-28T23:27:20.977041Z","shell.execute_reply.started":"2022-11-28T23:27:20.977016Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["tokenizer = define_tokenizer([train_df.long_answer,train_df.question,\n","                              test_df.long_answer,test_df.question])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"4d9a591e-1d30-445b-90e2-540a0305f6c5","_uuid":"2224b3f4-3cbd-458e-8351-c6856547fea2","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.978476Z","iopub.status.idle":"2022-11-28T23:27:20.979377Z","shell.execute_reply":"2022-11-28T23:27:20.979142Z","shell.execute_reply.started":"2022-11-28T23:27:20.979116Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["tokenizer"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"a5c4c079-0a0d-43b0-840c-9a1eae45b8b2","_uuid":"b606e4b3-fab0-4e20-a1a6-252f4f7dc08d","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.981816Z","iopub.status.idle":"2022-11-28T23:27:20.982670Z","shell.execute_reply":"2022-11-28T23:27:20.982433Z","shell.execute_reply.started":"2022-11-28T23:27:20.982408Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# Get the training data word index\n","word_index = tokenizer.word_index\n","print('Number of Unique Tokens: %d' % len(word_index))"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"5509e85d-29c7-42f8-891f-6284cde4d667","_uuid":"0e62881d-7f33-4589-a904-89614690b013","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.983952Z","iopub.status.idle":"2022-11-28T23:27:20.984631Z","shell.execute_reply":"2022-11-28T23:27:20.984415Z","shell.execute_reply.started":"2022-11-28T23:27:20.984390Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["list(enumerate(word_index.items()))[:50]"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"1166abf6-0703-49d7-8efc-1964e0820169","_uuid":"ca536424-2078-43b6-9176-506cde1f7dea","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.986314Z","iopub.status.idle":"2022-11-28T23:27:20.987401Z","shell.execute_reply":"2022-11-28T23:27:20.987139Z","shell.execute_reply.started":"2022-11-28T23:27:20.987113Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["tokenizer.word_index['handle']"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"31b599f8-c446-47aa-b20c-eabd8ce1cbb7","_uuid":"4a133a10-98e3-4cad-b7c7-4f746e6c0387","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.988573Z","iopub.status.idle":"2022-11-28T23:27:20.989658Z","shell.execute_reply":"2022-11-28T23:27:20.989410Z","shell.execute_reply.started":"2022-11-28T23:27:20.989279Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["tokenizer.word_index['pandemic']"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"5b35665e-63d1-4fee-8b39-0c07ecc08219","_uuid":"28281cbe-c827-4aa7-94e1-82508db5c8d5","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.991058Z","iopub.status.idle":"2022-11-28T23:27:20.991936Z","shell.execute_reply":"2022-11-28T23:27:20.991720Z","shell.execute_reply.started":"2022-11-28T23:27:20.991693Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_long_answers = encode(train_df['long_answer'].values, tokenizer)\n","train_questions = encode(train_df['question'].values, tokenizer)\n","\n","test_long_answers = encode(test_df['long_answer'].values, tokenizer)\n","test_questions = encode(test_df['question'].values, tokenizer)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"2c43ae89-8c97-47b3-8c60-05ef8bc4eee0","_uuid":"830b04f2-4cdd-4ae3-bee9-fd8a5c44896a","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.993217Z","iopub.status.idle":"2022-11-28T23:27:20.994096Z","shell.execute_reply":"2022-11-28T23:27:20.993816Z","shell.execute_reply.started":"2022-11-28T23:27:20.993772Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_long_answers"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"ab9ff931-89ab-46a8-b792-58f10da5c835","_uuid":"99465788-87bd-446f-bbc5-335e07656e51","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.995442Z","iopub.status.idle":"2022-11-28T23:27:20.996305Z","shell.execute_reply":"2022-11-28T23:27:20.996076Z","shell.execute_reply.started":"2022-11-28T23:27:20.996052Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_long_answers[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"8d18e89b-206b-41dc-b477-06cb91968586","_uuid":"497922ab-0eb3-4ed8-8efa-21be42658b8c","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.997747Z","iopub.status.idle":"2022-11-28T23:27:20.998400Z","shell.execute_reply":"2022-11-28T23:27:20.998185Z","shell.execute_reply.started":"2022-11-28T23:27:20.998160Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_questions"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"944b5b0f-96f9-4f26-9123-a464a23788b6","_uuid":"1caa28ec-fb57-4b46-9727-4967437e5db6","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:20.999603Z","iopub.status.idle":"2022-11-28T23:27:21.000315Z","shell.execute_reply":"2022-11-28T23:27:21.000088Z","shell.execute_reply.started":"2022-11-28T23:27:21.000062Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_labels = train_df.is_long_answer.astype(int).values\n","test_labels = test_df.is_long_answer.astype(int).values"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"f73dfcfd-d7df-472c-a04e-0aa4021fecc3","_uuid":"39314633-d67e-4f2e-8bc1-e78ca212e5f1","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.001656Z","iopub.status.idle":"2022-11-28T23:27:21.002423Z","shell.execute_reply":"2022-11-28T23:27:21.002166Z","shell.execute_reply.started":"2022-11-28T23:27:21.002139Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_labels"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"e7818437-3c5d-4805-ab2a-078fe8b5e569","_uuid":"098735ef-7343-40a4-96e1-acd891c2de40","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.003699Z","iopub.status.idle":"2022-11-28T23:27:21.004387Z","shell.execute_reply":"2022-11-28T23:27:21.004167Z","shell.execute_reply.started":"2022-11-28T23:27:21.004141Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["test_labels"]},{"cell_type":"markdown","metadata":{"_cell_guid":"63a6ca22-5fcc-4414-a7a4-3571bb874e0f","_uuid":"bea71261-b867-4108-bdff-58322bf8b364","trusted":true},"source":["# Define embedding layer"]},{"cell_type":"markdown","metadata":{"_cell_guid":"756cfc6e-1220-4082-ae6f-378d8449c443","_uuid":"852487fe-bc98-4573-a995-deeb3d39b35d","trusted":true},"source":[" Loading the pre-trained embedding - using Glove"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"13798110-3f84-4d67-b3be-1229a7799c7a","_uuid":"93210ea0-224d-4d68-b67a-720d880dcae9","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.005720Z","iopub.status.idle":"2022-11-28T23:27:21.006381Z","shell.execute_reply":"2022-11-28T23:27:21.006171Z","shell.execute_reply.started":"2022-11-28T23:27:21.006147Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["embed_size = 200\n","embedding_dict = {}\n","\n","with open('../input/glove6b/glove.6B.' + str(embed_size) + 'd.txt','r') as f:\n","    for line in f:\n","        values = line.split()\n","        word = values[0]\n","        vectors = np.asarray(values[1:],'float32')\n","        embedding_dict[word] = vectors        \n","f.close()"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"d1a8aec6-4fb7-4555-a315-4f01edf8ad7d","_uuid":"35bab8c8-5eac-49c1-894a-0c43af234a54","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.007592Z","iopub.status.idle":"2022-11-28T23:27:21.008261Z","shell.execute_reply":"2022-11-28T23:27:21.008046Z","shell.execute_reply.started":"2022-11-28T23:27:21.008022Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["num_words = len(word_index) + 1\n","\n","#initializing embedding matrix\n","embedding_matrix = np.zeros((num_words, embed_size))\n","print(\"num_words:\", num_words)\n","print(\"embedding_matrix:\", embedding_matrix)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"20beaec4-af36-459b-85a2-28c51233f08a","_uuid":"d7fe4ba9-5738-46bf-b294-e0dd1ea2d36a","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.009519Z","iopub.status.idle":"2022-11-28T23:27:21.010215Z","shell.execute_reply":"2022-11-28T23:27:21.010007Z","shell.execute_reply.started":"2022-11-28T23:27:21.009982Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["for word, i in word_index.items():\n","    if i > num_words:\n","        continue\n","    \n","    emb_vec = embedding_dict.get(word)\n","    \n","    if emb_vec is not None:\n","        embedding_matrix[i] = emb_vec"]},{"cell_type":"markdown","metadata":{"_cell_guid":"9ee876f5-cca6-4365-8b46-781a72a776f8","_uuid":"dd77f29c-b0ed-46b9-8f1f-527c66eb90d4","trusted":true},"source":["# Defining model¶"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"13ddaae1-bf84-4ecc-ab54-9152ff1b26a1","_uuid":"89366d45-8341-4ab0-be7f-b3f347127666","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.011426Z","iopub.status.idle":"2022-11-28T23:27:21.012093Z","shell.execute_reply":"2022-11-28T23:27:21.011883Z","shell.execute_reply.started":"2022-11-28T23:27:21.011858Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#initialize embedding layer\n","embedding_layer = tf.keras.layers.Embedding(\n","    len(word_index) + 1,\n","    embed_size,\n","    embeddings_initializer = tf.keras.initializers.Constant(embedding_matrix),\n","    trainable = False\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"95b2af33-ea97-4409-97c8-57a6bb4d3424","_uuid":"99f1de64-dc38-4d0e-9870-ad510404e1f0","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.013448Z","iopub.status.idle":"2022-11-28T23:27:21.014137Z","shell.execute_reply":"2022-11-28T23:27:21.013922Z","shell.execute_reply.started":"2022-11-28T23:27:21.013897Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# question encoding-encodes the question\n","question_input = Input(shape=(None,))\n","question_x = embedding_layer(question_input)\n","question_x = SpatialDropout1D(0.2)(question_x)\n","question_x = Bidirectional(LSTM(100, return_sequences=True))(question_x)\n","question_x = GlobalMaxPooling1D()(question_x) # outputs an encoded array representing the question\n","\n","# answer encoding-encodes the answer\n","answer_input = Input(shape=(None,))\n","answer_x = embedding_layer(answer_input)\n","answer_x = SpatialDropout1D(0.2)(answer_x)\n","answer_x = Bidirectional(LSTM(150, return_sequences=True))(answer_x)\n","answer_x = GlobalMaxPooling1D()(answer_x) #outputs an encoded array representing the answer\n","\n","# classification\n","combined_x = concatenate([question_x, answer_x])\n","combined_x = Dense(300, activation='relu')(combined_x)\n","combined_x = Dropout(0.5)(combined_x)\n","combined_x = Dense(300, activation='relu')(combined_x)\n","combined_x = Dropout(0.5)(combined_x)\n","model_output = Dense(1, activation='sigmoid')(combined_x) # probability how close the potential answer is to the true answer to the question.\n","\n","# defining model by combining above three parts\n","model = tf.keras.models.Model(inputs=[answer_input, question_input], outputs=model_output)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"261b2d57-5439-489e-bdb7-804c5ebe74a5","_uuid":"ce7c6d6c-ccc4-46bf-808e-1b7bc2c40927","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.015448Z","iopub.status.idle":"2022-11-28T23:27:21.016174Z","shell.execute_reply":"2022-11-28T23:27:21.015951Z","shell.execute_reply.started":"2022-11-28T23:27:21.015924Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"2ac8f1c7-83e3-4e73-9750-cfafd86a2f69","_uuid":"7ae5d5ec-7996-498e-b91b-50d342c18b56","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.017449Z","iopub.status.idle":"2022-11-28T23:27:21.018154Z","shell.execute_reply":"2022-11-28T23:27:21.017933Z","shell.execute_reply.started":"2022-11-28T23:27:21.017907Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["model.compile(\n","    loss='binary_crossentropy', \n","    optimizer='adam',\n","    metrics=['BinaryAccuracy', 'Recall', 'Precision'])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"73bd535b-2fab-48a8-a4b7-9cf5efe87256","_uuid":"24de4784-645b-45e1-a3f6-c75850c820ea","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.019464Z","iopub.status.idle":"2022-11-28T23:27:21.020169Z","shell.execute_reply":"2022-11-28T23:27:21.019944Z","shell.execute_reply.started":"2022-11-28T23:27:21.019916Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#define callbacks - to avoid plateauing & achieve early stopping\n","callbacks = [\n","    tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', patience=2, verbose=1),\n","    tf.keras.callbacks.EarlyStopping(monitor='loss', patience=5, verbose=1),]"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"71197545-acb0-44c6-ad58-065dac3a8321","_uuid":"2d6221f2-3ef1-4dc7-93dc-0ffa351d1130","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.021523Z","iopub.status.idle":"2022-11-28T23:27:21.022257Z","shell.execute_reply":"2022-11-28T23:27:21.022036Z","shell.execute_reply.started":"2022-11-28T23:27:21.022010Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# define model parameters\n","epochs = 30\n","batch_size = 128\n","class_weights = {0: 0.5, 1: 5.}"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"7e52e04b-9edd-44ee-8d8b-a18454d00718","_uuid":"2e1d0c0e-8bc9-42ac-b420-6cca270ef913","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.023479Z","iopub.status.idle":"2022-11-28T23:27:21.024169Z","shell.execute_reply":"2022-11-28T23:27:21.023934Z","shell.execute_reply.started":"2022-11-28T23:27:21.023911Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["'''\n","history = model.fit(\n","    x = [train_long_answers, train_questions], \n","    y = train_labels,\n","    validation_data = (\n","        [test_long_answers, test_questions], test_labels),\n","    epochs = epochs,\n","    callbacks = callbacks,\n","    class_weight = class_weights,\n","    batch_size = batch_size,\n","    shuffle = True\n",")\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"4a406397-a683-4fb9-94bf-6cefe81d2940","_uuid":"4633496b-48ce-4ae2-ae78-c619203628fa","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.025460Z","iopub.status.idle":"2022-11-28T23:27:21.026163Z","shell.execute_reply":"2022-11-28T23:27:21.025935Z","shell.execute_reply.started":"2022-11-28T23:27:21.025909Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["'''\n","# save model\n","model.save('long_model.h5')\n","'''"]},{"cell_type":"markdown","metadata":{"_cell_guid":"6a55ec8e-b7ff-4b3f-9df3-03ead8ac5e43","_uuid":"8015c82a-4bf4-42bc-b93b-3159574497d5","trusted":true},"source":["# Model evaluation"]},{"cell_type":"markdown","metadata":{"_cell_guid":"ba6729a8-9e79-4aad-8857-a9ac1e0ad934","_uuid":"ee60c809-1676-4767-a6c9-b521a885f0f1","trusted":true},"source":["identifying if correct long answers given to a question"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"4000d302-f710-488c-bd92-0aa80be92d7f","_uuid":"746dc574-90cc-44b1-8390-f77f50d94a85","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.027453Z","iopub.status.idle":"2022-11-28T23:27:21.028124Z","shell.execute_reply":"2022-11-28T23:27:21.027913Z","shell.execute_reply.started":"2022-11-28T23:27:21.027887Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["'''\n","# Evaluate checking training & validation loss\n","fig, ax = plt.subplots(1, 2, figsize=(15, 5))\n","\n","ax[0].set_title('Training Loss')\n","ax[0].plot(history.history['loss'],marker = '.',mec = 'r', mfc = 'r')\n","\n","ax[1].set_title('Validation Loss')\n","ax[1].plot(history.history['val_loss'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"cf77b027-6f5f-4202-ad56-2e3d2c7284d5","_uuid":"382e418a-e44e-4852-b6fe-c30107447777","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.029418Z","iopub.status.idle":"2022-11-28T23:27:21.030124Z","shell.execute_reply":"2022-11-28T23:27:21.029901Z","shell.execute_reply.started":"2022-11-28T23:27:21.029875Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["'''\n","# Evaluate checking accuracy, recall and precision\n","fig, ax = plt.subplots(3, 2, figsize=(15, 10))\n","\n","ax[0,0].set_title('Training Accuracy')\n","ax[0,0].plot(history.history['binary_accuracy'],marker = '.',mec = 'r', mfc = 'r')\n","\n","ax[0,1].set_title('Validation Accuracy')\n","ax[0,1].plot(history.history['val_binary_accuracy'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","\n","ax[1,0].set_title('Training Recall')\n","ax[1,0].plot(history.history['recall'],marker = '.',mec = 'r', mfc = 'r')\n","\n","ax[1,1].set_title('Validation Recall')\n","ax[1,1].plot(history.history['val_recall'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","\n","ax[2,0].set_title('Training Precision')\n","ax[2,0].plot(history.history['precision'],marker = '.',mec = 'r', mfc = 'r')\n","\n","ax[2,1].set_title('Validation Precision')\n","ax[2,1].plot(history.history['val_precision'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"86eb599a-f054-4b18-b1a5-d345f32675bb","_uuid":"950e0a6c-0b81-4c9e-84c7-2af68cff7cbe","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.031429Z","iopub.status.idle":"2022-11-28T23:27:21.032160Z","shell.execute_reply":"2022-11-28T23:27:21.031907Z","shell.execute_reply.started":"2022-11-28T23:27:21.031881Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["'''\n","# Evaluate checking recall\n","\n","recall = history.history['recall'][-1]\n","precision = history.history['precision'][-1]\n","\n","print('Train F1 score: {0:.4f}'.format(\n","    2 * (precision * recall) / (precision + recall)\n","))\n","\n","recall = history.history['val_recall'][-1]\n","precision = history.history['val_precision'][-1]\n","\n","print('Validation F1 score: {0:.4f}'.format(2 * (precision * recall) / (precision + recall)))\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"3618c2da-6bca-4fcc-bd48-b81137140d77","_uuid":"d93f4bfa-0aa4-4452-890a-faac94104b87","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.033446Z","iopub.status.idle":"2022-11-28T23:27:21.034151Z","shell.execute_reply":"2022-11-28T23:27:21.033937Z","shell.execute_reply.started":"2022-11-28T23:27:21.033911Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["predictions = model.predict([np.expand_dims(test_labels, axis=0), np.expand_dims(test_labels, axis=0)])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"de2a05f7-8651-40d0-a281-58896a799197","_uuid":"dc1a5531-a07e-478f-8b95-cf58bb6ea5bc","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.035376Z","iopub.status.idle":"2022-11-28T23:27:21.036036Z","shell.execute_reply":"2022-11-28T23:27:21.035823Z","shell.execute_reply.started":"2022-11-28T23:27:21.035798Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["predictions"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"6a1b1f67-7e8f-498d-aabc-ef2972277423","_uuid":"99ca212d-316c-4d20-8251-2b1dcdcb6b6f","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.037334Z","iopub.status.idle":"2022-11-28T23:27:21.038090Z","shell.execute_reply":"2022-11-28T23:27:21.037845Z","shell.execute_reply.started":"2022-11-28T23:27:21.037818Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# evaluating with live inputs\n","def test_question(model, question, positive, negative):\n","    sentences = [question, positive, negative]\n","    \n","    for i in range(3):\n","        sentences[i] = remove_stopwords(sentences[i])\n","        sentences[i] = remove_html(sentences[i])\n","    \n","    sentences = encode(sentences, tokenizer)\n","    \n","    predictions = model.predict([np.expand_dims(sentences[1], axis=0), np.expand_dims(sentences[0], axis=0)])\n","\n","    print('Positive: {0:.2f}'.format(predictions[0][0]))\n","\n","    predictions = model.predict(\n","        [np.expand_dims(sentences[2], axis=0), np.expand_dims(sentences[0], axis=0)])\n","\n","    print('Negative: {0:.2f}'.format(predictions[0][0]))\n","    return predictions"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"8b8dd600-2f84-4136-b020-bac1a057a7b0","_uuid":"32b1b9ae-848a-4440-a8af-811af180a2d5","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.039407Z","iopub.status.idle":"2022-11-28T23:27:21.040109Z","shell.execute_reply":"2022-11-28T23:27:21.039882Z","shell.execute_reply.started":"2022-11-28T23:27:21.039856Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["question = 'who invented a portable handset '\n","\n","positive='<P> Martin Cooper invented a portable handset in 1973, when he was a project manager at Motorola. It was almost three decades after the idea of cellular communications was introduced by Bell Laboratories. </P>'\n","negative = '<P> Email marketing has evolved rapidly alongside the technological growth of the 21st century . Prior to this growth , when emails were novelties to the majority of customers , email marketing was not as effective . In 1978 , Gary Thuerk of Digital Equipment Corporation ( DEC ) sent out the first mass email to approximately 400 potential clients via the Advanced Research Projects Agency Network ( ARPANET ) . This email resulted in $13 million worth of sales in DEC products , and highlighted the potential of marketing through mass emails . However , as email marketing developed as an effective means of direct communication , users began blocking out content from emails with filters and blocking programs . In order to effectively communicate a message through email , marketers had to develop a way of pushing content through to the end user , without being cut out by automatic filters and spam removing software . This resulted in the birth of triggered marketing emails , which are sent to specific users based on their tracked online browsing patterns . </P>'"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"6a562532-4fce-458c-8623-34ce550ccc67","_uuid":"91dbf3ea-e013-4d6c-b869-9c24b3e72d04","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.041473Z","iopub.status.idle":"2022-11-28T23:27:21.042224Z","shell.execute_reply":"2022-11-28T23:27:21.041988Z","shell.execute_reply.started":"2022-11-28T23:27:21.041961Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# test_question(model, question, positive, negative)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"dc72f08b-ab10-414d-a6ac-d8d4900176c5","_uuid":"3d3e363f-2ef9-47a3-ae59-0c023ed04099","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.043762Z","iopub.status.idle":"2022-11-28T23:27:21.044441Z","shell.execute_reply":"2022-11-28T23:27:21.044226Z","shell.execute_reply.started":"2022-11-28T23:27:21.044201Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["question = 'who is the south african high commissioner in london'\n","\n","positive = \"<P> Tracy McConnell , better known as `` The Mother '' , is the title character from the CBS television sitcom How I Met Your Mother . The show , narrated by Future Ted , tells the story of how Ted Mosby met The Mother . Tracy McConnell appears in 8 episodes from `` Lucky Penny '' to `` The Time Travelers '' as an unseen character ; she was first seen fully in `` Something New '' and was promoted to a main character in season 9 . The Mother is played by Cristin Milioti . </P>\"\n","\n","negative = \"<P> In `` Bass Player Wanted '' , the Mother picks up a hitchhiking Marshall , carrying his son Marvin , on her way to Farhampton Inn . On their way , it is revealed that the Mother is a bass player in the band , that is scheduled to play at the wedding reception . But the band 's leader , Darren , forced her to quit . The Mother ultimately decides to confront Darren and retake the band . She ends up alone at the bar , and while practicing a speech to give Darren , Darren walks up to her furious the groom 's best man punched him for `` no reason . '' Amused by this , the Mother laughs , and Darren quits the band in anger . </P>\""]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"044f4425-2176-4fd1-b362-4f2e9134e443","_uuid":"9d782cd6-3642-43eb-a7cb-befc41c58adf","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.045743Z","iopub.status.idle":"2022-11-28T23:27:21.046394Z","shell.execute_reply":"2022-11-28T23:27:21.046183Z","shell.execute_reply.started":"2022-11-28T23:27:21.046159Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# test_question(question, positive, negative)"]},{"cell_type":"markdown","metadata":{"_cell_guid":"d4bdb83b-453f-41db-b899-08ca7b8b9fb0","_uuid":"a6cd1c58-a5a4-420d-9bba-006fd1e54610","trusted":true},"source":["# **Part 2- extracting short answer from a long answer**"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"97bcad24-3031-411b-9452-538282986132","_uuid":"f9a81c30-59ed-4203-952f-0b63c04314d2","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.047604Z","iopub.status.idle":"2022-11-28T23:27:21.048332Z","shell.execute_reply":"2022-11-28T23:27:21.048102Z","shell.execute_reply.started":"2022-11-28T23:27:21.048077Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#filter records where short answers exists\n","def get_short_answer(annotations, long_start, long_end):\n","    if len(annotations['short_answers']) > 0:\n","        short_start = annotations['short_answers'][0]['start_token']\n","        short_end = annotations['short_answers'][0]['end_token']        \n","        short_start = short_start - long_start\n","        short_end = short_end - long_start        \n","        return short_start, short_end\n","    else:\n","        return 0, 0\n","    \n","def form_short_data_row(question, text, long_start, long_end, short_start, short_end):\n","    long_answer = ' '.join(text[long_start:long_end])\n","    short_answer = ' '.join(long_answer.split(' ')[short_start:short_end])\n","    row = {\n","        'question': question,\n","        'long_answer': long_answer,\n","        'short_answer': short_answer,\n","        'short_start': short_start,\n","        'short_end': short_end\n","    }    \n","    return row"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"0ff18648-4bed-482c-8e7b-a472a73e3ecf","_uuid":"703fb3cc-43f8-417e-a0f3-8ed08c1de4eb","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.049745Z","iopub.status.idle":"2022-11-28T23:27:21.050459Z","shell.execute_reply":"2022-11-28T23:27:21.050232Z","shell.execute_reply.started":"2022-11-28T23:27:21.050207Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#loading short answers\n","def load_short_data(file_path, questions_start, questions_end):\n","    rows = []    \n","    with open(file_path) as file:\n","\n","        for i in tqdm(range(questions_start, questions_end)):\n","            line = file.readline()\n","            line = json.loads(line)\n","            question, text, annotations = get_question_and_document(line)\n","\n","            for i, candidate in enumerate(line['long_answer_candidates']):\n","                label, long_start, long_end = get_long_candidate(i, annotations, candidate)\n","\n","                if label == True:\n","                    short_start, short_end = get_short_answer(annotations, long_start, long_end)\n","                    \n","                    rows.append(\n","                        form_short_data_row(question, text, long_start, long_end, short_start, short_end)\n","                    )\n","        \n","    return pd.DataFrame(rows)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"6939e5b2-6d86-4d2f-9082-ca8ca928f46a","_uuid":"02615326-8703-401d-8de9-6058947360dc","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.051700Z","iopub.status.idle":"2022-11-28T23:27:21.052441Z","shell.execute_reply":"2022-11-28T23:27:21.052183Z","shell.execute_reply.started":"2022-11-28T23:27:21.052158Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_short_df = load_short_data(train_path, 0, num_train_ques)\n","test_short_df = load_short_data(train_path, num_train_ques, num_val_ques)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"adfe02a2-5a24-447b-ae6f-641e9009a21d","_uuid":"7b5d0442-ee74-49f7-918b-d4a491e2b24d","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.053821Z","iopub.status.idle":"2022-11-28T23:27:21.054484Z","shell.execute_reply":"2022-11-28T23:27:21.054264Z","shell.execute_reply.started":"2022-11-28T23:27:21.054239Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_short_df.head(10)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"e335bf89-9745-4275-bbdc-c3258ea270ba","_uuid":"67da9fea-7fae-45b5-841d-f26bb49d28b7","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.055749Z","iopub.status.idle":"2022-11-28T23:27:21.056438Z","shell.execute_reply":"2022-11-28T23:27:21.056215Z","shell.execute_reply.started":"2022-11-28T23:27:21.056189Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["count_values_in_column(train_short_df,'short_answer')"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"33b6ef6e-1167-4b2a-8ce3-111152b20c2d","_uuid":"12d9e95a-fe3d-4fcd-80b0-a0efffeeb06b","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.057763Z","iopub.status.idle":"2022-11-28T23:27:21.058460Z","shell.execute_reply":"2022-11-28T23:27:21.058228Z","shell.execute_reply.started":"2022-11-28T23:27:21.058201Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["train_long_answers = encode(train_short_df['long_answer'].values, tokenizer)\n","train_questions = encode(train_short_df['question'].values, tokenizer)\n","\n","test_long_answers = encode(test_short_df['long_answer'].values, tokenizer)\n","test_questions = encode(test_short_df['question'].values, tokenizer)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"3481f3c1-2f0c-468c-a8a9-085ba2963e69","_uuid":"d759fead-1931-47fa-b81a-689205a54bd5","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.059755Z","iopub.status.idle":"2022-11-28T23:27:21.060451Z","shell.execute_reply":"2022-11-28T23:27:21.060204Z","shell.execute_reply.started":"2022-11-28T23:27:21.060179Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#define 2 arrays for the start index and another for the end index\n","def form_short_labels(df, sentence_length):\n","    start_labels = np.zeros((len(df), sentence_length))\n","    end_labels = np.zeros((len(df), sentence_length))\n","\n","    #get the token indexes from short_start and short_end columns and assign it to new arrays. encoding with 1\n","    for i in range(len(df)):\n","        start = df.loc[i].short_start\n","        end = df.loc[i].short_end\n","\n","        if start < 500 and end < 500:\n","            start_labels[i, start] = 1\n","            end_labels[i, end] = 1\n","        else:\n","            continue\n","    \n","    return start_labels, end_labels\n","\n","train_start_labels, train_end_labels = form_short_labels(train_short_df, max_len)\n","test_start_labels, test_end_labels = form_short_labels(test_short_df, max_len)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"b5826dcc-2e8f-45fb-8df4-2abb67a428c9","_uuid":"cd353abb-77c2-4197-8c15-f8ff0e33dba4","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.061881Z","iopub.status.idle":"2022-11-28T23:27:21.062600Z","shell.execute_reply":"2022-11-28T23:27:21.062380Z","shell.execute_reply.started":"2022-11-28T23:27:21.062355Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["print(train_short_df.loc[10].question)\n","\n","print(train_short_df.loc[10].long_answer)\n","print(train_short_df.loc[10].short_answer)\n","\n","print('Start index: {0}'.format(train_start_labels[10]))\n","print('End index: {0}'.format(train_end_labels[10]))"]},{"cell_type":"markdown","metadata":{"_cell_guid":"89a402a1-e718-4934-9a62-a9a1fee273b6","_uuid":"5c75b680-2ca7-48e7-b214-190f86e8fc7d","trusted":true},"source":["Defining the short model"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"54d413c5-56d4-499b-bada-0c57977ec1f1","_uuid":"3e2494ba-f009-460d-8dcf-6e368e785fde","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.063846Z","iopub.status.idle":"2022-11-28T23:27:21.064486Z","shell.execute_reply":"2022-11-28T23:27:21.064278Z","shell.execute_reply.started":"2022-11-28T23:27:21.064254Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# short answer model parameters\n","short_epochs = 100\n","short_batch_size = 128\n","embed_size_short=200"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"a227267f-2c93-4039-9931-382b173f7d8d","_uuid":"4ef12578-6abe-46d3-a235-c0f0a9b1ef28","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.065803Z","iopub.status.idle":"2022-11-28T23:27:21.066463Z","shell.execute_reply":"2022-11-28T23:27:21.066251Z","shell.execute_reply.started":"2022-11-28T23:27:21.066227Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# load from file\n","embedding_dict = {}\n","\n","with open('../input/glove6b/glove.6B.200' + 'd.txt','r') as f:\n","    for line in f:\n","        values = line.split()\n","        word = values[0]\n","        vectors = np.asarray(values[1:],'float32')\n","        embedding_dict[word] = vectors\n","        \n","f.close()\n","\n","# write to matrix\n","num_words = len(tokenizer.word_index) + 1\n","embedding_matrix = np.zeros((num_words, embed_size_short))\n","\n","for word, i in tokenizer.word_index.items():\n","    if i > num_words:\n","        continue\n","    \n","    emb_vec = embedding_dict.get(word)\n","    \n","    if emb_vec is not None:\n","        embedding_matrix[i] = emb_vec\n","        \n","# load as tensorflow embedding\n","#define embedding layer for the short model\n","embedding_layer2 = tf.keras.layers.Embedding(\n","    len(tokenizer.word_index) + 1,\n","    embed_size_short,\n","    embeddings_initializer = tf.keras.initializers.Constant(embedding_matrix),\n","    trainable = False\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"778a0966-02fa-4b55-a333-e0f127ead3a8","_uuid":"9b8f2538-5e23-4360-bcac-c05c48ba155e","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.067767Z","iopub.status.idle":"2022-11-28T23:27:21.068464Z","shell.execute_reply":"2022-11-28T23:27:21.068226Z","shell.execute_reply.started":"2022-11-28T23:27:21.068200Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# encoding question input\n","question_input = Input(shape=(None,))\n","question_x = embedding_layer2(question_input)\n","question_x = SpatialDropout1D(0.2)(question_x)\n","question_x = Bidirectional(LSTM(200, return_sequences=True))(question_x)\n","question_x = Bidirectional(LSTM(100, return_sequences=True))(question_x)\n","\n","# encoding answer input\n","answer_input = Input(shape=(None,))\n","answer_x = embedding_layer2(answer_input)\n","answer_x = SpatialDropout1D(0.2)(answer_x)\n","answer_x = Bidirectional(LSTM(250, return_sequences=True))(answer_x)\n","answer_x = Bidirectional(LSTM(150, return_sequences=True))(answer_x)\n","\n","# merge the encodings\n","combined_x = concatenate([question_x, answer_x])\n","\n","# predict start index of the short answer\n","start_x = Dropout(0.1)(combined_x) \n","start_x = Conv1D(1,1)(start_x)\n","start_x = Flatten()(start_x)\n","start_x = Activation('softmax', name='start_token')(start_x)\n","\n","# predict end index of the short answer\n","end_x = Dropout(0.1)(combined_x) \n","end_x = Conv1D(1,1)(end_x)\n","end_x = Flatten()(end_x)\n","end_x = Activation('softmax', name='end_token')(end_x)\n","\n","# merge the parts into one model\n","short_model = tf.keras.models.Model(inputs=[answer_input, question_input], outputs=[start_x, end_x])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"643dcbbd-95dc-4375-8fa2-9d9038f135b1","_uuid":"3325689a-498b-4c05-9bd0-923073d4c7f2","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.069909Z","iopub.status.idle":"2022-11-28T23:27:21.070652Z","shell.execute_reply":"2022-11-28T23:27:21.070420Z","shell.execute_reply.started":"2022-11-28T23:27:21.070392Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["short_model.compile(\n","    loss='categorical_crossentropy', \n","    optimizer='adam',\n","    metrics=['categorical_accuracy', 'Recall', 'Precision'])"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"c71fd9fe-39a7-45ab-92c6-47aef11b6f7a","_uuid":"9ab6fd6d-fed8-4c84-b51a-96f4e4da9fa2","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.072019Z","iopub.status.idle":"2022-11-28T23:27:21.072752Z","shell.execute_reply":"2022-11-28T23:27:21.072455Z","shell.execute_reply.started":"2022-11-28T23:27:21.072431Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["short_model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"fe4cb1e3-7518-41f9-9ab4-162e752f0ef5","_uuid":"35c6c8c7-5d9e-4017-acfb-947d467e3087","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.074034Z","iopub.status.idle":"2022-11-28T23:27:21.074714Z","shell.execute_reply":"2022-11-28T23:27:21.074468Z","shell.execute_reply.started":"2022-11-28T23:27:21.074443Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# define callbacks for the short model\n","#increased patience or number of epochs with no improvement after which training will be stopped.\n","callbacks = [\n","    tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', patience=4, verbose=1),\n","    tf.keras.callbacks.EarlyStopping(monitor='loss', patience=5, verbose=1),]"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"7d1b1b05-b225-4a0c-806d-3135605805e7","_uuid":"6dd068f7-0178-434b-b179-06f16316539f","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.075931Z","iopub.status.idle":"2022-11-28T23:27:21.076580Z","shell.execute_reply":"2022-11-28T23:27:21.076372Z","shell.execute_reply.started":"2022-11-28T23:27:21.076347Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# history = short_model.fit(\n","#     x = [train_long_answers, train_questions], \n","#     y = [train_start_labels, train_end_labels],epochs = short_epochs, callbacks = callbacks,\n","#     validation_data = ([test_long_answers, test_questions], [test_start_labels, test_end_labels]),\n","#     batch_size = short_batch_size,  shuffle = True)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"003f5120-859b-48a3-b9ac-5e60b6349d1c","_uuid":"a581bba7-cabd-46cf-851f-5d8018c77094","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.077825Z","iopub.status.idle":"2022-11-28T23:27:21.078473Z","shell.execute_reply":"2022-11-28T23:27:21.078263Z","shell.execute_reply.started":"2022-11-28T23:27:21.078238Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# short_model.save('short_model.h5')"]},{"cell_type":"markdown","metadata":{"_cell_guid":"246c24fd-0cd7-4fdc-a45c-f6b68bde1790","_uuid":"694745c8-4047-4d13-903f-38e3cb9edf30","trusted":true},"source":["# **Model Evaluation**"]},{"cell_type":"markdown","metadata":{"_cell_guid":"4d17e4b1-a36c-4889-bdc6-8a86eacef42e","_uuid":"5397375d-ad76-4487-a83b-4912ebbd6b70","trusted":true},"source":["identifying if correct short answers given to a long answers"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"b8d7ce1a-2fba-4215-9e6d-c69a7f3268cb","_uuid":"13c12652-bb20-4e95-9b6c-95a76248d508","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.079767Z","iopub.status.idle":"2022-11-28T23:27:21.080454Z","shell.execute_reply":"2022-11-28T23:27:21.080222Z","shell.execute_reply.started":"2022-11-28T23:27:21.080196Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# print('Epoch: {0}'.format(len(history.history['loss'])))\n","# print('Loss: {0}'.format(history.history['loss'][-1]))"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"9e1eeb1a-71be-46f8-8ea1-40f0fd64a4ca","_uuid":"630126eb-7ed1-4218-89b2-f374ce7ac84c","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.081845Z","iopub.status.idle":"2022-11-28T23:27:21.082568Z","shell.execute_reply":"2022-11-28T23:27:21.082350Z","shell.execute_reply.started":"2022-11-28T23:27:21.082325Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# print('Training final results')\n","\n","# accuracy = history.history['start_token_categorical_accuracy'][-1]\n","# recall = history.history['start_token_recall'][-1]\n","# precision = history.history['start_token_precision'][-1]\n","\n","# print('--------------------------------------------------')\n","# print('Start token accuracy: {0}'.format(accuracy))\n","# print('Start token recall: {0}'.format(recall))\n","# print('Start token precision: {0}'.format(precision))\n","# print('Start token F1 score: {0:.4f}'.format(2 * (precision * recall) / (precision + recall)))\n","\n","# print('--------------------------------------------------')\n","\n","# accuracy = history.history['end_token_categorical_accuracy'][-1]\n","# recall = history.history['end_token_recall_1'][-1]\n","# precision = history.history['end_token_precision_1'][-1]\n","\n","# print('End token accuracy: {0}'.format(accuracy))\n","# print('End token recall: {0}'.format(recall))\n","# print('End token precision: {0}'.format(precision))\n","# print('End token F1 score: {0:.4f}'.format(2 * (precision * recall) / (precision + recall)))"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"12c45765-7547-4577-a3c6-e75a60a644a8","_uuid":"c042bec2-3408-45b1-adf8-c92395b9f859","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.083910Z","iopub.status.idle":"2022-11-28T23:27:21.084596Z","shell.execute_reply":"2022-11-28T23:27:21.084374Z","shell.execute_reply.started":"2022-11-28T23:27:21.084349Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# print('Validation final results')\n","# print('--------------------------------------------------')\n","\n","# accuracy = history.history['val_start_token_categorical_accuracy'][-1]\n","# recall = history.history['val_start_token_recall'][-1]\n","# precision = history.history['val_start_token_precision'][-1]\n","\n","# print('Start token accuracy: {0}'.format(accuracy))\n","# print('Start token recall: {0}'.format(recall))\n","# print('Start token precision: {0}'.format(precision))\n","# print('Start token F1 score: {0:.4f}'.format( 2 * (precision * recall) / (precision + recall)))\n","\n","# print('--------------------------------------------------')\n","\n","# accuracy = history.history['val_end_token_categorical_accuracy'][-1]\n","# recall = history.history['val_end_token_recall_1'][-1]\n","# precision = history.history['val_end_token_precision_1'][-1]\n","\n","# print('End token accuracy: {0}'.format(accuracy))\n","# print('End token recall: {0}'.format(recall))\n","# print('End token precision: {0}'.format(precision))\n","# print('End token F1 score: {0:.4f}'.format(2 * (precision * recall) / (precision + recall)))"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"4e72637f-8072-495f-937c-654f817413c0","_uuid":"2d93d272-699a-4f9d-9e0c-a8c20b2039b5","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.085873Z","iopub.status.idle":"2022-11-28T23:27:21.086588Z","shell.execute_reply":"2022-11-28T23:27:21.086361Z","shell.execute_reply.started":"2022-11-28T23:27:21.086335Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# #Evaluate plotting training & validation loss\n","\n","# fig, ax = plt.subplots(1, 2, figsize=(15, 5))\n","\n","# ax[0].set_title('Training Loss')\n","# ax[0].plot(history.history['loss'],marker = '.',mec = 'r', mfc = 'r')\n","\n","# ax[1].set_title('Validation Loss')\n","# ax[1].plot(history.history['val_loss'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"eca75bc2-61d9-48e2-bed0-fb516b6028bc","_uuid":"47ace8df-b080-4a2c-8240-7c9fa1e8aed6","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.087867Z","iopub.status.idle":"2022-11-28T23:27:21.088517Z","shell.execute_reply":"2022-11-28T23:27:21.088304Z","shell.execute_reply.started":"2022-11-28T23:27:21.088278Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# #plotting metrics; accuracy, precision, recall for the first output array\n","# fig, ax = plt.subplots(3, 2, figsize=(15, 10))\n","\n","# fig.suptitle('First output-start token')\n","\n","# ax[0,0].set_title('Training Accuracy')\n","# ax[0,0].plot(history.history['start_token_categorical_accuracy'],marker = '.',mec = 'r', mfc = 'r')\n","\n","# ax[0,1].set_title('Validation Accuracy')\n","# ax[0,1].plot(history.history['val_start_token_categorical_accuracy'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","\n","# ax[1,0].set_title('Training Recall')\n","# ax[1,0].plot(history.history['start_token_recall'],marker = '.',mec = 'r', mfc = 'r')\n","\n","# ax[1,1].set_title('Validation Recall')\n","# ax[1,1].plot(history.history['val_start_token_recall'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","\n","# ax[2,0].set_title('Training Precision')\n","# ax[2,0].plot(history.history['start_token_precision'],marker = '.',mec = 'r', mfc = 'r')\n","\n","# ax[2,1].set_title('Validation Precision')\n","# ax[2,1].plot(history.history['val_start_token_precision'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"e032c538-c952-4fee-afff-73cd0c503497","_uuid":"822c17b5-1f15-4ae3-b092-fecc3adb2356","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.089812Z","iopub.status.idle":"2022-11-28T23:27:21.090510Z","shell.execute_reply":"2022-11-28T23:27:21.090278Z","shell.execute_reply.started":"2022-11-28T23:27:21.090252Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["# #plotting metrics; accuracy, precision, recall for the second output array\n","# fig, ax = plt.subplots(3, 2, figsize=(15, 10))\n","\n","# fig.suptitle('Second output-end token')\n","\n","# ax[0,0].set_title('Training Accuracy')\n","# ax[0,0].plot(history.history['end_token_categorical_accuracy'],marker = '.',mec = 'r', mfc = 'r')\n","\n","# ax[0,1].set_title('Validation Accuracy')\n","# ax[0,1].plot(history.history['val_end_token_categorical_accuracy'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","\n","# ax[1,0].set_title('Training Recall')\n","# ax[1,0].plot(history.history['end_token_recall_1'],marker = '.',mec = 'r', mfc = 'r')\n","\n","# ax[1,1].set_title('Validation Recall')\n","# ax[1,1].plot(history.history['val_end_token_recall_1'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")\n","\n","# ax[2,0].set_title('Training Precision')\n","# ax[2,0].plot(history.history['end_token_precision_1'],marker = '.',mec = 'r', mfc = 'r')\n","\n","# ax[2,1].set_title('Validation Precision')\n","# ax[2,1].plot(history.history['val_end_token_precision_1'],marker = '.',mec = 'r', mfc = 'r',color=\"green\")"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"350ef195-c21a-4c4d-a8e0-f92fdb00a53c","_uuid":"fcd5d393-e370-4d25-bb67-7f279cf83700","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.091751Z","iopub.status.idle":"2022-11-28T23:27:21.092398Z","shell.execute_reply":"2022-11-28T23:27:21.092190Z","shell.execute_reply.started":"2022-11-28T23:27:21.092166Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["#testing with live inputs\n","def test_short_answer(short_model, question, long_answer):\n","    sentences = [long_answer, question]\n","    \n","    sentences = encode(sentences, tokenizer)\n","    \n","    predictions = short_model.predict(\n","        [np.expand_dims(sentences[0], axis=0), np.expand_dims(sentences[1], axis=0)])\n","    \n","    predictions = np.array(predictions)\n","    \n","    prediction_start = np.argmax(predictions[0,0])\n","    prediction_end = np.argmax(predictions[1,0])\n","    prediction_string = ' '.join(long_answer.split(' ')[prediction_start:prediction_end])\n","\n","    return prediction_start, prediction_end, prediction_string"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"06828f9f-a346-44ab-8b09-d3e5448c5d53","_uuid":"a7ed59bf-fb77-40cd-b869-55b1b2d94042","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.093657Z","iopub.status.idle":"2022-11-28T23:27:21.094366Z","shell.execute_reply":"2022-11-28T23:27:21.094153Z","shell.execute_reply.started":"2022-11-28T23:27:21.094130Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["question = 'which is the most common use of opt-in e-mail marketing'\n","long_answer = \"<P> A common example of permission marketing is a newsletter sent to an advertising firm 's customers . Such newsletters inform customers of upcoming events or promotions , or new products . In this type of advertising , a company that wants to send a newsletter to their customers may ask them at the point of purchase if they would like to receive the newsletter . </P>\""]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"456c4e00-dba8-43ad-8be8-46bbdc29a0d0","_uuid":"5564bf27-677e-471d-9fb8-6d30777b7f31","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.095609Z","iopub.status.idle":"2022-11-28T23:27:21.096287Z","shell.execute_reply":"2022-11-28T23:27:21.096077Z","shell.execute_reply.started":"2022-11-28T23:27:21.096053Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["start, end, short_answer = test_short_answer(short_model, question, long_answer)\n","\n","print('Start token: ' + str(start))\n","print('End token: ' + str(end))\n","print('Answer: ' + short_answer)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"66cabdd8-f891-4c3e-8fc8-4c6540ab8523","_uuid":"aae82acd-7c0a-4853-91b7-31d9d3be92b8","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.097493Z","iopub.status.idle":"2022-11-28T23:27:21.098207Z","shell.execute_reply":"2022-11-28T23:27:21.097985Z","shell.execute_reply.started":"2022-11-28T23:27:21.097959Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["question = 'who invented a portable handset'\n","long_answer=\"<P> Martin Cooper invented a portable handset in 1973, when he was a project manager at Motorola. It was almost three decades after the idea of cellular communications was introduced by Bell Laboratories. </P>\""]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"57597453-6881-43e2-9b6d-4f916b96ebb7","_uuid":"86dacdc4-10b0-447c-bc5e-3858891c0544","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.099544Z","iopub.status.idle":"2022-11-28T23:27:21.100299Z","shell.execute_reply":"2022-11-28T23:27:21.100066Z","shell.execute_reply.started":"2022-11-28T23:27:21.100027Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["start, end, short_answer = test_short_answer(short_model, question, long_answer)\n","\n","print('Start token: ' + str(start))\n","print('End token: ' + str(end))\n","print('Answer: ' + short_answer)"]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"7a493a1c-94bc-4331-a61f-8b588d2a0de5","_uuid":"31b9246e-a030-4eb5-88ec-d9d034ec39f4","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.101795Z","iopub.status.idle":"2022-11-28T23:27:21.102514Z","shell.execute_reply":"2022-11-28T23:27:21.102293Z","shell.execute_reply.started":"2022-11-28T23:27:21.102267Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["question = 'who is the south african high commissioner in london'\n","long_answer = \"<P> Tracy McConnell , better known as `` The Mother '' , is the title character from the CBS television sitcom How I Met Your Mother . The show , narrated by Future Ted , tells the story of how Ted Mosby met The Mother . Tracy McConnell appears in 8 episodes from `` Lucky Penny '' to `` The Time Travelers '' as an unseen character ; she was first seen fully in `` Something New '' and was promoted to a main character in season 9 . The Mother is played by Cristin Milioti . </P>\""]},{"cell_type":"code","execution_count":null,"metadata":{"_cell_guid":"c80a9294-7d03-4f35-96c4-6ae079c2f947","_uuid":"b95e8c9d-f886-44c5-b125-47073ba0c976","collapsed":false,"execution":{"iopub.status.busy":"2022-11-28T23:27:21.103794Z","iopub.status.idle":"2022-11-28T23:27:21.104478Z","shell.execute_reply":"2022-11-28T23:27:21.104251Z","shell.execute_reply.started":"2022-11-28T23:27:21.104222Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"outputs":[],"source":["start, end, short_answer = test_short_answer(short_model, question, long_answer)\n","\n","print('Start token: ' + str(start))\n","print('End token: ' + str(end))\n","print('Answer: ' + short_answer)"]},{"cell_type":"markdown","metadata":{},"source":["# **Horizontal and Vertical Ensembles**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.105784Z","iopub.status.idle":"2022-11-28T23:27:21.106430Z","shell.execute_reply":"2022-11-28T23:27:21.106218Z","shell.execute_reply.started":"2022-11-28T23:27:21.106194Z"},"trusted":true},"outputs":[],"source":["import os\n","os.chdir(r'/kaggle/working')"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.107656Z","iopub.status.idle":"2022-11-28T23:27:21.108370Z","shell.execute_reply":"2022-11-28T23:27:21.108149Z","shell.execute_reply.started":"2022-11-28T23:27:21.108107Z"},"trusted":true},"outputs":[],"source":["def create_model():\n","    #initialize embedding layer\n","    embedding_layer = tf.keras.layers.Embedding(\n","        len(word_index) + 1,\n","        embed_size,\n","        embeddings_initializer = tf.keras.initializers.Constant(embedding_matrix),\n","        trainable = False\n","    )\n","    \n","    # question encoding-encodes the question\n","    question_input = Input(shape=(None,))\n","    question_x = embedding_layer(question_input)\n","    question_x = SpatialDropout1D(0.2)(question_x)\n","    question_x = Bidirectional(LSTM(100, return_sequences=True))(question_x)\n","    question_x = GlobalMaxPooling1D()(question_x) # outputs an encoded array representing the question\n","\n","    # answer encoding-encodes the answer\n","    answer_input = Input(shape=(None,))\n","    answer_x = embedding_layer(answer_input)\n","    answer_x = SpatialDropout1D(0.2)(answer_x)\n","    answer_x = Bidirectional(LSTM(150, return_sequences=True))(answer_x)\n","    answer_x = GlobalMaxPooling1D()(answer_x) #outputs an encoded array representing the answer\n","\n","    # classification\n","    combined_x = concatenate([question_x, answer_x])\n","    combined_x = Dense(300, activation='relu')(combined_x)\n","    combined_x = Dropout(0.5)(combined_x)\n","    combined_x = Dense(300, activation='relu')(combined_x)\n","    combined_x = Dropout(0.5)(combined_x)\n","    model_output = Dense(1, activation='sigmoid')(combined_x) # probability how close the potential answer is to the true answer to the question.\n","\n","    # defining model by combining above three parts\n","    model = tf.keras.models.Model(inputs=[answer_input, question_input], outputs=model_output)\n","    \n","    model.compile(\n","        loss='binary_crossentropy', \n","        optimizer='adam',\n","        metrics=['BinaryAccuracy', 'Recall', 'Precision'])\n","\n","    return model"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.109721Z","iopub.status.idle":"2022-11-28T23:27:21.110399Z","shell.execute_reply":"2022-11-28T23:27:21.110175Z","shell.execute_reply.started":"2022-11-28T23:27:21.110150Z"},"trusted":true},"outputs":[],"source":["def assemble_horizontal_ensemble(ensemble_size, filepath, epochs, batch_size, class_weights):\n","    '''This function stores the weights file for each model at the end of every epoch.\n","        Returns the history object after the overall training'''\n","    callbacks = [\n","        tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', patience=2, verbose=1),\n","        tf.keras.callbacks.EarlyStopping(monitor='loss', patience=5, verbose=1),\n","        tf.keras.callbacks.ModelCheckpoint(\n","            filepath=filepath,\n","            save_weights_only=True,\n","            monitor='val_loss',\n","            mode='min',\n","            save_freq='epoch',\n","        )\n","    ]\n","\n","    model = create_model()\n","    # Save the model weight files after each epoch\n","    history = model.fit(\n","        x = [train_long_answers, train_questions], \n","        y = train_labels,\n","        validation_data = (\n","            [test_long_answers, test_questions], test_labels),\n","        epochs = epochs,\n","        callbacks = callbacks,\n","        class_weight = class_weights,\n","        batch_size = batch_size,\n","        shuffle = True\n","    )\n","\n","    return history\n","\n","\n","# Filter out just the last {ensemble_size} number of models and removed the previous ones\n","# Keep the file names of the last {ensemble_size} models in a list\n","def filter_old_epoch_files(directory_name, file_extension = \"hdf5\"):\n","    '''This function removes unneeded epoch weight files. The weight files not a part\n","    of the last {ensemble_size} models.'''\n","    horizontal_ensemble = []\n","    files = sorted(os.listdir(directory_name), reverse=True)\n","    epoch_nums_to_remove = epochs - ensemble_size + 1\n","\n","    for file in files:\n","        if \".\" in file:\n","            file_ext = file.split(\".\")[-1]\n","            if file_ext == file_extension:\n","                epoch, val_loss = file.split(\"_\")\n","                epoch = int(epoch)\n","                # This keeps just the last {ensemble_size} models\n","                if epoch < epoch_nums_to_remove:\n","                    os.remove(file)\n","                else:\n","                    horizontal_ensemble.append(file)\n","                    \n","    return horizontal_ensemble\n","\n","def load_horizontal_models(directory_name, horizontal_ensemble):\n","    '''Loads the last {ensemble_size} models from their weight files into a list.'''\n","    horizontal_models = []\n","\n","    for model_weights_filename in horizontal_ensemble:\n","        model = create_model()\n","        model.load_weights(f'{directory_name}/{model_weights_filename}')\n","        horizontal_models.append(model)\n","        print('model loaded', f'{directory_name}/{model_weights_filename}')\n","\n","    return horizontal_models"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.111627Z","iopub.status.idle":"2022-11-28T23:27:21.112346Z","shell.execute_reply":"2022-11-28T23:27:21.112111Z","shell.execute_reply.started":"2022-11-28T23:27:21.112086Z"},"trusted":true},"outputs":[],"source":["# define horizontal ensemble parameters\n","ensemble_size = 3\n","min_val_loss = 0.02\n","filepath = \"{epoch:02d}_{val_loss:.2f}.hdf5\"\n","directory_name = r'/kaggle/working'\n","\n","# define model parameters\n","epochs = 10\n","batch_size = 50\n","class_weights = {0: 0.5, 1: 5.}"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.113640Z","iopub.status.idle":"2022-11-28T23:27:21.114341Z","shell.execute_reply":"2022-11-28T23:27:21.114134Z","shell.execute_reply.started":"2022-11-28T23:27:21.114109Z"},"trusted":true},"outputs":[],"source":["train_long_answers = encode(train_df['long_answer'].values, tokenizer)\n","train_questions = encode(train_df['question'].values, tokenizer)\n","\n","test_long_answers = encode(test_df['long_answer'].values, tokenizer)\n","test_questions = encode(test_df['question'].values, tokenizer)\n","len(test_long_answers)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.115539Z","iopub.status.idle":"2022-11-28T23:27:21.116244Z","shell.execute_reply":"2022-11-28T23:27:21.116033Z","shell.execute_reply.started":"2022-11-28T23:27:21.116010Z"},"trusted":true},"outputs":[],"source":["assemble_horizontal_ensemble(ensemble_size, filepath, epochs, batch_size, class_weights)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.117465Z","iopub.status.idle":"2022-11-28T23:27:21.118175Z","shell.execute_reply":"2022-11-28T23:27:21.117946Z","shell.execute_reply.started":"2022-11-28T23:27:21.117920Z"},"trusted":true},"outputs":[],"source":["horizontal_ensemble = filter_old_epoch_files(directory_name)\n","horizontal_ensemble"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.119439Z","iopub.status.idle":"2022-11-28T23:27:21.120164Z","shell.execute_reply":"2022-11-28T23:27:21.119943Z","shell.execute_reply.started":"2022-11-28T23:27:21.119917Z"},"trusted":true},"outputs":[],"source":["horizontal_models = load_horizontal_models(directory_name, horizontal_ensemble)\n","horizontal_models"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.121496Z","iopub.status.idle":"2022-11-28T23:27:21.122259Z","shell.execute_reply":"2022-11-28T23:27:21.122024Z","shell.execute_reply.started":"2022-11-28T23:27:21.121996Z"},"trusted":true},"outputs":[],"source":["test_features = np.zeros((len(test_long_answers), len(test_long_answers[0]), len(test_questions[0])))\n","print('test_features',test_features)\n","for i in range(len(test_features)):\n","    test_features[i][0] = np.expand_dims(test_long_answers[i], axis=0)\n","    test_features[i][1] = np.expand_dims(test_questions[i], axis=0)\n","print('test_features TWOOO',test_features)\n","test_dataset = tf.data.Dataset.from_tensor_slices(test_features)\n","test_dataset = test_dataset.batch(batch_size)\n","# test_preds = model.predict(test_features)\n","\n","for x in test_dataset:\n","    print('test_preds', model.predict_on_batch(x))\n","    break\n","\n","def evaluate_horizontal_ensemble(horizontal_models, test_long_answers, test_questions, test_labels):\n","    '''Runs the test dataset through the committee of models, each casts a vote and the majority vote\n","    is selected as the overall vote of the committee.'''\n","    num_correct = 0\n","    for test_long_answer, test_question, test_label in zip(test_long_answers, test_questions, test_labels):\n","        votes = np.zeros((2))\n","        for model in horizontal_models:\n","            prediction = model.predict([np.expand_dims(test_long_answer, axis=0), np.expand_dims(test_question, axis=0)])[0][0]\n","\n","            # if prediction > 0.5 -> positive, else negative\n","            predicted_class = round(prediction)\n","            votes[predicted_class] += 1\n","\n","        overall_vote = np.argmax(votes)\n","        if overall_vote == test_label:\n","            num_correct += 1\n","        print('votes (pos, neg)', votes, 'overall_vote', overall_vote, 'test_label', test_label, 'correct?', overall_vote == test_label)\n","\n","    total = len(test_labels)\n","    accuracy = num_correct / total\n","\n","    return num_correct, total, accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.123561Z","iopub.status.idle":"2022-11-28T23:27:21.124279Z","shell.execute_reply":"2022-11-28T23:27:21.124051Z","shell.execute_reply.started":"2022-11-28T23:27:21.124026Z"},"trusted":true},"outputs":[],"source":["num_correct, total, accuracy = evaluate_horizontal_ensemble(horizontal_models, test_long_answers, test_questions, test_labels)\n","print('number correct', num_correct, 'total', total, 'accuracy', accuracy)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.status.busy":"2022-11-28T23:27:21.125492Z","iopub.status.idle":"2022-11-28T23:27:21.126169Z","shell.execute_reply":"2022-11-28T23:27:21.125959Z","shell.execute_reply.started":"2022-11-28T23:27:21.125934Z"},"trusted":true},"outputs":[],"source":["len(test_questions)"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3.9.10 64-bit","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.10"},"vscode":{"interpreter":{"hash":"aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"}}},"nbformat":4,"nbformat_minor":4}
